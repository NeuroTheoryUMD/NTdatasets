window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "NTdatasets", "modulename": "NTdatasets", "kind": "module", "doc": "<h2 id=\"welcome-to-the-documentation-for-ntdatasets\">Welcome to the documentation for NTdatasets!</h2>\n\n<h4 id=\"click-on-the-links-on-the-left-or-use-the-searchbar-to-navigate-through-the-documentation\">Click on the links on the left (or use the searchbar) to navigate through the documentation.</h4>\n\n<p>To generate the documentation, run the following command in the parent directory of the repository:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code>pdoc<span class=\"w\"> </span>-d<span class=\"w\"> </span>google<span class=\"w\"> </span>-o<span class=\"w\"> </span>NTdatasets/docs<span class=\"w\"> </span>NTdatasets\n</code></pre>\n</div>\n"}, {"fullname": "NTdatasets.HN", "modulename": "NTdatasets.HN", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets", "modulename": "NTdatasets.HN.HNdatasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset", "kind": "class", "doc": "<p>Class for handling HN data.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.__init__", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.__init__", "kind": "function", "doc": "<p>Args: \n    filename: currently the pre-processed matlab file from Dan's old-style format\n    which_stim: which stim is relevant for the neurons in this dataset (default 'left')\n    skip_lags: shift stim to throw out early lags\n    **kwargs: non-dataset specific arguments that get passed into SensoryBase</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>, </span><span class=\"param\"><span class=\"n\">skip_lags</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.disp_list", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.disp_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.stimlist", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.stimlist", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Nstim", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Nstim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.TRcued", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.TRcued", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.TRchoice", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.TRchoice", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.TRsignal", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.TRsignal", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.TRstrength", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.TRstrength", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.TRstim", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.TRstim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.robs", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.robs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.dfs", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.dfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.used_inds", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.stimL", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.stimL", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.stimR", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.stimR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Xsacc", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Xsacc", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Xadapt", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Xadapt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.ACinput", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.ACinput", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Ntr", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Ntr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Nframes", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Nframes", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.NT", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.CHnames", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.CHnames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Rtr", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Rtr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.trs", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.trs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Utr", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Utr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.Xtr", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.Xtr", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.min_trial_size", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.min_trial_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.max_trial_size", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.max_trial_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.assemble_stim", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.assemble_stim", "kind": "function", "doc": "<p>Prepares stimulus for dataset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which_stim:</strong>  'left' or 'right' (default 'left')</li>\n<li><strong>skip_lags:</strong>  how many lags to skip (default 2)</li>\n<li><strong>num_lags:</strong>  how many lags to include in stimulus (default None, will use dataset value)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"s1\">&#39;left&#39;</span>, </span><span class=\"param\"><span class=\"n\">skip_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.construct_Xadapt", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.construct_Xadapt", "kind": "function", "doc": "<p>Constructs adaptation-within-trial tent function</p>\n\n<p>Args: \n    num_tents: default 11\n    cueduncued: whether to fit separate kernels to cued/uncued</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tent_spacing</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">cueduncued</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.autoencoder_design_matrix", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.autoencoder_design_matrix", "kind": "function", "doc": "<p>Makes auto-encoder input using windows described above, and including the\nchosen cells. Will put as additional covariate \"ACinput\" in __get_item__</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pre_win:</strong>  how many time steps to include before origin</li>\n<li><strong>post_win:</strong>  how many time steps to include after origin</li>\n<li><strong>blank:</strong>  how many time steps to blank in each direction, including origin</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pre_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">post_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.train_test_assign", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.train_test_assign", "kind": "function", "doc": "<p>Assigns trials to training and test sets.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>trial_ns:</strong>  trial numbers</li>\n<li><strong>fold:</strong>  number of folds (default 4)</li>\n<li><strong>use_random:</strong>  whether to use random assignment (default True)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>utr: trial numbers for training set\n  xtr: trial numbers for test set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trial_ns</span>, </span><span class=\"param\"><span class=\"n\">fold</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">use_random</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.HNdataset.channel_list_scrub", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "HNdataset.channel_list_scrub", "kind": "function", "doc": "<p>Scrubs channel names from filenames.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>fnames:</strong>  list of filenames</li>\n<li><strong>subset:</strong>  subset of filenames (default None)</li>\n<li><strong>display_names:</strong>  whether to display names (default True)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>chnames: list of channel names</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fnames</span>, </span><span class=\"param\"><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">display_names</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural", "kind": "class", "doc": "<p>Class for handling motion neural data.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.__init__", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_lags:</strong>  number of lags to include in stimulus (default 30)</li>\n<li><strong>tr_gap:</strong>  number of frames to blank out after each trial (default 10) </li>\n<li><strong>filename:</strong>  currently the pre-processed matlab file from Dan's old-style format</li>\n<li><strong>datadir:</strong>  directory for data (goes directly into SensoryBase)</li>\n<li><strong>**kwargs:</strong>  non-dataset specific arguments that get passed into SensoryBase</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"n\">tr_gap</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.robs", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.robs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.NT", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.dfs", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.dfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.NC", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.ACinput", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.ACinput", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.stimB", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.stimB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.stimW", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.stimW", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.trial_stim", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.trial_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.stimts", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.stimts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.flash_stim", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.flash_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.dims", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.Xadapt", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.Xadapt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.trial_type", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.trial_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.blinks", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.blinks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.saccades", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.saccades", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.sacc_on", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.sacc_on", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.sacc_off", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.sacc_off", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.eye_pos", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.eye_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.eye_speed", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.eye_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.framerate", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.framerate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.BTtimepts", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.BTtimepts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.assemble_stimulus", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.assemble_stimulus", "kind": "function", "doc": "<p>Assembles stimulus for dataset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which_stim:</strong>  could be 'trial' (default) using just the first stim onset\" or could\nmark each flash (calling 'which_stim' anything else), although this would not implicitly \ntake things like adapation into account</li>\n<li><strong>use_trial_type:</strong>  could fit different stim responses in the two conditions to gauge the effects</li>\n<li><strong>num_lags:</strong>  number of lags to include in stimulus (default 180)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>, </span><span class=\"param\"><span class=\"n\">use_trial_type</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">180</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.construct_Xadapt", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.construct_Xadapt", "kind": "function", "doc": "<p>Constructs adaptation-within-trial tent function</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tent_start:</strong>  starting point for tent basis</li>\n<li><strong>tent_spacing:</strong>  spacing between tent basis</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tent_start</span><span class=\"o\">=</span><span class=\"mi\">26</span>, </span><span class=\"param\"><span class=\"n\">tent_spacing</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNdatasets.MotionNeural.autoencoder_design_matrix", "modulename": "NTdatasets.HN.HNdatasets", "qualname": "MotionNeural.autoencoder_design_matrix", "kind": "function", "doc": "<p>Makes auto-encoder input using windows described above, and including the\nchosen cells. Will put as additional covariate \"ACinput\" in __get_item__</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>trial_level:</strong>  whether to average over trials</li>\n<li><strong>pre_win:</strong>  how many time steps to include before origin</li>\n<li><strong>post_win:</strong>  how many time steps to include after origin</li>\n<li><strong>blank:</strong>  how many time steps to blank in each direction, including origin</li>\n<li><strong>cells:</strong>  which cells to include</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trial_level</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">pre_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">post_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils", "modulename": "NTdatasets.HN.HNutils", "kind": "module", "doc": "<p>Utility functions to assist with creating, training and analyzing HN datasets\nInherited from NDN3 and essentially unvetted</p>\n"}, {"fullname": "NTdatasets.HN.HNutils.data_loader", "modulename": "NTdatasets.HN.HNutils", "qualname": "data_loader", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.channel_list_scrub", "modulename": "NTdatasets.HN.HNutils", "qualname": "channel_list_scrub", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">fnames</span>, </span><span class=\"param\"><span class=\"n\">subset</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">display_names</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.train_test_assign", "modulename": "NTdatasets.HN.HNutils", "qualname": "train_test_assign", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trial_ns</span>, </span><span class=\"param\"><span class=\"n\">fold</span><span class=\"o\">=</span><span class=\"mi\">4</span>, </span><span class=\"param\"><span class=\"n\">use_random</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.drift_design_matrix", "modulename": "NTdatasets.HN.HNutils", "qualname": "drift_design_matrix", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">num_trials</span>, </span><span class=\"param\"><span class=\"n\">drift_spacing</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.vector_regression", "modulename": "NTdatasets.HN.HNutils", "qualname": "vector_regression", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">xs</span>, </span><span class=\"param\"><span class=\"n\">ys</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.vec_norm", "modulename": "NTdatasets.HN.HNutils", "qualname": "vec_norm", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.R2fromMSE", "modulename": "NTdatasets.HN.HNutils", "qualname": "R2fromMSE", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mses</span>, </span><span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.adjR2", "modulename": "NTdatasets.HN.HNutils", "qualname": "adjR2", "kind": "function", "doc": "<p>Calculate R2s accounting for predicted drift. In poorly predicted cells, most of the variance is due to\ndrift, so this would make it look like the models are good at predicting stim and choice, when in fact they\nare just predicting drifts.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">damod</span>, </span><span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">i_c</span>, </span><span class=\"param\"><span class=\"n\">i_u</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.multibar_plot", "modulename": "NTdatasets.HN.HNutils", "qualname": "multibar_plot", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datas</span>, </span><span class=\"param\"><span class=\"n\">subplot_info</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">fig_width</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.title_write", "modulename": "NTdatasets.HN.HNutils", "qualname": "title_write", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">title_text</span>, </span><span class=\"param\"><span class=\"n\">lvl</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.mycorr", "modulename": "NTdatasets.HN.HNutils", "qualname": "mycorr", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">a</span>, </span><span class=\"param\"><span class=\"n\">b</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.calc_pop_angle", "modulename": "NTdatasets.HN.HNutils", "qualname": "calc_pop_angle", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">v1</span>, </span><span class=\"param\"><span class=\"n\">v2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.LNdecoder", "modulename": "NTdatasets.HN.HNutils", "qualname": "LNdecoder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inputs</span>,</span><span class=\"param\">\t<span class=\"n\">output</span>,</span><span class=\"param\">\t<span class=\"n\">indx_train</span>,</span><span class=\"param\">\t<span class=\"n\">indx_test</span>,</span><span class=\"param\">\t<span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">l1reg</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">fit_params</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">nreps</span><span class=\"o\">=</span><span class=\"mi\">1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.NLdecoder", "modulename": "NTdatasets.HN.HNutils", "qualname": "NLdecoder", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">inputs</span>,</span><span class=\"param\">\t<span class=\"n\">output</span>,</span><span class=\"param\">\t<span class=\"n\">indx_train</span>,</span><span class=\"param\">\t<span class=\"n\">indx_test</span>,</span><span class=\"param\">\t<span class=\"n\">silent</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">l1reg</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">hidden_unit_frac</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.parse_channel_name", "modulename": "NTdatasets.HN.HNutils", "qualname": "parse_channel_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">cn</span>, </span><span class=\"param\"><span class=\"n\">area</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.HN.HNutils.HNchannels", "modulename": "NTdatasets.HN.HNutils", "qualname": "HNchannels", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">HNlist</span>, </span><span class=\"param\"><span class=\"n\">master_list</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway", "modulename": "NTdatasets.conway", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets", "modulename": "NTdatasets.conway.bar1d_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET", "kind": "class", "doc": "<p>-- can load batches from multiple datasets\n-- hdf5 files must have the following information:\n    Robs\n    RobsMU\n    stim: 4-d stimulus: time x nx x ny x color\n    block_inds: start and stop of 'trials' (perhaps fixations for now)\n    other things: saccades? or should that be in trials? </p>\n\n<p>Constructor will take eye position, which for now is an input from data\ngenerated in the session (not on disk). It should have the length size \nof the total number of fixations x1.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.__init__", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.__init__", "kind": "function", "doc": "<p>Constructor options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames:</strong>  list of strings of hdf5 files</li>\n<li><strong>datadir:</strong>  directory where files are stored</li>\n<li><strong>include_MUs:</strong>  whether to include multi-units</li>\n<li><strong>time_embed:</strong>  0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded</li>\n<li><strong>num_lags:</strong>  number of lags to include in time-embedding</li>\n<li><strong>stim_crop:</strong>  whether to crop stimulus (not implemented)</li>\n<li><strong>Hstim_shift:</strong>  how much to shift horizontal stimulus (in bars)</li>\n<li><strong>Hdiscardzero:</strong>  whether to discard zero position in horizontal stimulus</li>\n<li><strong>combine_stim:</strong>  whether to combine horizontal and vertical stimulus</li>\n<li><strong>stim_gap:</strong>  gap between horizontal and vertical stimulus</li>\n<li><strong>drift_interval:</strong>  how many trials to anchor each drift term</li>\n<li><strong>eye_config:</strong>  0 = all, 1, 2, and 3 are options (3 = binocular)</li>\n<li><strong>binocular:</strong>  whether to include separate filters for each eye</li>\n<li><strong>device:</strong>  torch device</li>\n<li><strong>maxT:</strong>  maximum time points to load (for debugging)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Hstim_shift</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Hdiscardzero</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">combine_stim</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stim_gap</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">eye_config</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">binocular</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">maxT</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.eye_config", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.eye_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.stim_gap", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.stim_gap", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.fhandles", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.dfs_orig", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.dfs_orig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.avRs", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.stim_location", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.stim_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.stim_locationET", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.stim_locationET", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.fix_location", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.fix_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.probeIDs", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.probeIDs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.probeIDsMU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.probeIDsMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.dt", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.pixel_size", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.pixel_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.exptdate", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.exptdate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.channel_mapSU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.channel_mapSU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.channel_mapMU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.channel_mapMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.channel_map", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.channel_map", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.fix_n", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.fix_n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.data_threshold", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.data_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.file_index", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.sacc_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.generate_Xfix", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.num_blks", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.num_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.with_shifter", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.with_shifter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.shifts", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.shifts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.stimname", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.stimname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.ETtraceHR", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.ETtraceHR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.NT", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.used_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.sort_rating", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.sort_rating", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.sort_ratingMU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.sort_ratingMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.Xdrift", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.Xdrift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.preload_numpy", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: loads into self.stim, self.robs, self.dfs, self.fix_n, self.Xdrift</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.assemble_stimulus", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.assemble_stimulus", "kind": "function", "doc": "<p>Assembles stimulus for the dataset\n-- This will also time-embed the stimulus if requested\n-- This will also shift the stimulus if requested\n-- This will also crop the stimulus if requested</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>combine_stim:</strong>  whether to combine horizontal and vertical stimulus</li>\n<li><strong>stim_crop:</strong>  whether to crop stimulus (not implemented)</li>\n<li><strong>time_embed:</strong>  0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded</li>\n<li><strong>num_lags:</strong>  number of lags to include in time-embedding</li>\n<li><strong>Hshift:</strong>  how much to shift horizontal stimulus (in bars)</li>\n<li><strong>Hdiscardzero:</strong>  whether to discard zero position in horizontal stimulus</li>\n<li><strong>shifts:</strong>  shifts to apply to stimulus (if not None)</li>\n<li><strong>BUF:</strong>  buffer for shifting stimulus</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">combine_stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">Hshift</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Hdiscardzero</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">shifts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">BUF</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.to_tensor", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.to_tensor", "kind": "function", "doc": "<p>Converts all data to tensors</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device:</strong>  torch device to move data to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.process_fixations", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.process_fixations", "kind": "function", "doc": "<p>Processes fixation informatiom from dataset, but also allows new saccade detection\nto be input and put in the right format within the dataset (main use).</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sacc_in:</strong>  new saccade information to be processed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.fix_n</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacc_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.add_shifter", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.add_shifter", "kind": "function", "doc": "<p>Adds a shifter to the dataset</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shifts:</strong>  shifts to apply to the stimulus</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.shifts</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shifts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.avrates", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: average firing rates across specified indices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.apply_data_mask", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.apply_data_mask", "kind": "function", "doc": "<p>For when data_filters (or a section) is modified based on models, and want to apply\nto the dataset. Ideally would save the original.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dmask:</strong>  mask to apply to data_filters</li>\n<li><strong>crange:</strong>  range of cells to apply to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.dfs to new data mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dmask</span>, </span><span class=\"param\"><span class=\"n\">crange</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.data_mask_revert", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.data_mask_revert", "kind": "function", "doc": "<p>Reverts data mask to original</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>crange:</strong>  range of cells to revert</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.dfs to original data mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">crange</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.shift_stim_fixation", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  stimulus to shift</li>\n<li><strong>shift:</strong>  amount to shift stimulus</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>shstim: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.create_valid_indices", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.create_valid_indices", "kind": "function", "doc": "<p>This creates self.valid_inds vector that is used for __get_item__ \n-- Will default to num_lags following each saccade beginning</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>post_sacc_gap:</strong>  number of lags to ignore after saccade</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.valid_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">post_sacc_gap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.crossval_setup", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>test_set:</strong>  whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</li>\n<li><strong>verbose:</strong>  whether to print out information</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.fold_sample", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  number of items to fold</li>\n<li><strong>folds:</strong>  number of folds</li>\n<li><strong>random_gen:</strong>  whether to randomly sample or uniformly sample</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: indices of validation items\n  rem_items: indices of remaining items</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.BarET.adjust_Xdrift_xval", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "BarET.adjust_Xdrift_xval", "kind": "function", "doc": "<p>Adjust drift matrix to not fit xval parameterz</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.Xdrift to adjusted version</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7", "kind": "class", "doc": "<p>-- can load batches from multiple datasets\n-- hdf5 files must have the following information:\n    Robs\n    RobsMU\n    stim: 4-d stimulus: time x nx x ny x color\n    block_inds: start and stop of 'trials' (perhaps fixations for now)\n    other things: saccades? or should that be in trials? </p>\n\n<p>Constructor will take eye position, which for now is an input from data\ngenerated in the session (not on disk). It should have the length size \nof the total number of fixations x1.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.__init__", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.__init__", "kind": "function", "doc": "<p>Constructor options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sess_list:</strong>  list of sessions to load</li>\n<li><strong>datadir:</strong>  directory where data is stored</li>\n<li><strong>num_lags:</strong>  number of lags to include in time-embedding</li>\n<li><strong>stim_crop:</strong>  whether to crop stimulus (not implemented)</li>\n<li><strong>Hstim_shift:</strong>  how much to shift horizontal stimulus (in bars)</li>\n<li><strong>Hdiscardzero:</strong>  whether to discard zero position in horizontal stimulus</li>\n<li><strong>time_embed:</strong>  0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded</li>\n<li><strong>folded_lags:</strong>  whether to fold lags in time-embedding</li>\n<li><strong>combine_stim:</strong>  whether to combine horizontal and vertical stimulus</li>\n<li><strong>stim_gap:</strong>  gap between horizontal and vertical stimuli</li>\n<li><strong>drift_interval:</strong>  how many trials to anchor each drift term</li>\n<li><strong>eye_config:</strong>  0 = all, 1, -1, and 2 are options (2 = binocular)</li>\n<li><strong>ignore_saccades:</strong>  whether to ignore saccades</li>\n<li><strong>include_MUs:</strong>  whether to include multi-units</li>\n<li><strong>preload:</strong>  whether to preload data</li>\n<li><strong>eyepos:</strong>  eye position data</li>\n<li><strong>device:</strong>  torch device to move data to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sess_list</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">Hstim_shift</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">Hdiscardzero</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">folded_lags</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">combine_stim</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">stim_gap</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"mi\">16</span>,</span><span class=\"param\">\t<span class=\"n\">eye_config</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_saccades</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">eyepos</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.datadir", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.datadir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.sess_list", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.sess_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.device", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.num_lags", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.num_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.time_embed", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.time_embed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.preload", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.preload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.stim_crop", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.stim_crop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.folded_lags", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.folded_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.combine_stim", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.combine_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.eye_config", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.eye_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.stim_gap", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.stim_gap", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.stimHshift", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.stimHshift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.Hdiscardzero", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.Hdiscardzero", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.drift_interval", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.drift_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.fhandles", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.dfs_orig", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.dfs_orig", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.ETstim_location", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.ETstim_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.stim_location", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.stim_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.fix_location", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.fix_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.probeIDs", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.probeIDs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.probeIDsMU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.probeIDsMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.dt", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.pixel_size", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.pixel_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.exptdate", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.exptdate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.data_threshold", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.data_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.file_index", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.sacc_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.sus", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.sus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.NC", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.eyepos", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.eyepos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.generate_Xfix", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.num_blks", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.num_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.block_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.block_filemapping", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.block_filemapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.include_MUs", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.include_MUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.SUinds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.SUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.MUinds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.MUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.cells_out", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.cells_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.avRs", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.with_shifter", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.with_shifter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.shifts", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.shifts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.test_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.test_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.val_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.train_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.fix_n", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.fix_n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.used_inds", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.stimname", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.stimname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.ETtraceHR", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.ETtraceHR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.NT", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.sort_rating", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.sort_rating", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.sort_ratingMU", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.sort_ratingMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.preload_numpy", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.stim, self.robs, self.dfs, self.eyepos, self.frame_times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.to_tensor", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.to_tensor", "kind": "function", "doc": "<p>Converts numpy data to torch tensors and moves to device</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device:</strong>  torch device to move data to</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.process_fixations", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.process_fixations", "kind": "function", "doc": "<p>Processes fixation informatiom from dataset, but also allows new saccade detection\nto be input and put in the right format within the dataset (main use)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sacc_in:</strong>  new saccade information to be processed (if None, will use existing)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.fix_n</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacc_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.add_shifter", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.add_shifter", "kind": "function", "doc": "<p>Adds a shifter to the dataset, which can be used to shift the stimulus</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>shifts:</strong>  shifts to be added to the dataset</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.shifts</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">shifts</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.avrates", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: average firing rates across the dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.apply_data_mask", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.apply_data_mask", "kind": "function", "doc": "<p>For when data_filters (or a section) is modified based on models, and want to apply\nto the dataset. Ideally would save the original</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dmask:</strong>  mask to apply to data</li>\n<li><strong>crange:</strong>  range of cells to apply mask to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.dfs to new data mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dmask</span>, </span><span class=\"param\"><span class=\"n\">crange</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.data_mask_revert", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.data_mask_revert", "kind": "function", "doc": "<p>Reverts data mask to original state</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>crange:</strong>  range of cells to revert mask</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.dfs to original data mask</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">crange</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.shift_stim_fixation", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  stimulus to shift</li>\n<li><strong>shift:</strong>  amount to shift by</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>shstim: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.create_valid_indices", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.create_valid_indices", "kind": "function", "doc": "<p>This creates self.valid_inds vector that is used for __get_item__ \n-- Will default to num_lags following each saccade beginning</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>post_sacc_gap:</strong>  number of lags to exclude following saccade</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.valid_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">post_sacc_gap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.crossval_setup", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>test_set:</strong>  whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</li>\n<li><strong>verbose:</strong>  whether to print out information</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.fold_sample", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  number of items to fold</li>\n<li><strong>folds:</strong>  number of folds</li>\n<li><strong>random_gen:</strong>  whether to randomly sample or uniformly sample</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: indices for validation set\n  rem_items: indices for remaining set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.adjust_Xdrift_xval", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.adjust_Xdrift_xval", "kind": "function", "doc": "<p>Adjust drift matrix to not fit xval parameterz</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.Xdrift to new matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets.Bar1Dv7.get_max_samples", "modulename": "NTdatasets.conway.bar1d_datasets", "qualname": "Bar1Dv7.get_max_samples", "kind": "function", "doc": "<p>get the maximum number of samples that fit in memory -- for GLM/GQM x LBFGS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gpu_n:</strong>  which gpu to use</li>\n<li><strong>history_size:</strong>  number of time lags</li>\n<li><strong>nquad:</strong>  number of quadrature points</li>\n<li><strong>num_cells:</strong>  number of cells to use</li>\n<li><strong>buffer:</strong>  buffer to leave for other memory</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>maxsamples: maximum number of samples that can fit in memory</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpu_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nquad</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"mf\">1.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single", "modulename": "NTdatasets.conway.bar1d_datasets_single", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D", "kind": "class", "doc": "<p>-- can load batches from multiple datasets\n-- hdf5 files must have the following information:\n    Robs\n    RobsMU\n    stim: 4-d stimulus: time x nx x ny x color\n    block_inds: start and stop of 'trials' (perhaps fixations for now)\n    other things: saccades? or should that be in trials? </p>\n\n<p>Constructor will take eye position, which for now is an input from data\ngenerated in the session (not on disk). It should have the length size \nof the total number of fixations x1.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.__init__", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.__init__", "kind": "function", "doc": "<p>Constructor options.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sess_list:</strong>  list of strings of session names</li>\n<li><strong>datadir:</strong>  directory where data is stored</li>\n<li><strong>num_lags:</strong>  number of lags to include in stimulus</li>\n<li><strong>stim_crop:</strong>  cropping of stimulus</li>\n<li><strong>time_embed:</strong>  0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded</li>\n<li><strong>folded_lags:</strong>  whether to fold lags into channel dimension</li>\n<li><strong>ignore_saccades:</strong>  whether to ignore saccades in the data</li>\n<li><strong>include_MUs:</strong>  whether to include multi-units in the data</li>\n<li><strong>preload:</strong>  whether to preload data into memory</li>\n<li><strong>eyepos:</strong>  eye position data</li>\n<li><strong>device:</strong>  device to put data on</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sess_list</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">folded_lags</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_saccades</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">eyepos</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.datadir", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.datadir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sess_list", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sess_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.device", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.num_lags", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.num_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.time_embed", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.time_embed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.preload", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.preload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.stim_crop", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.stim_crop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.folded_lags", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.folded_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.fhandles", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.ETstim_location", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.ETstim_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.fix_location", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.fix_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.probeIDs", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.probeIDs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.probeIDsMU", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.probeIDsMU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.dt", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.dt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.pixel_size", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.pixel_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.exptdate", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.exptdate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.data_threshold", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.data_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.file_index", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sacc_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sus", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.NC", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.eyepos", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.eyepos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.generate_Xfix", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.num_blks", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.num_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.block_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.block_filemapping", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.block_filemapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.include_MUs", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.include_MUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.SUinds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.SUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.MUinds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.MUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.cells_out", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.cells_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.avRs", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.test_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.test_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.val_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.train_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.fix_n", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.fix_n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sacc_on", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sacc_on", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sacc_off", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sacc_off", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.used_inds", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.stimname", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.stimname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.NT", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sac_on", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sac_on", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.sac_off", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.sac_off", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.preload_numpy", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.stim, self.robs, self.dfs, self.eyepos, self.frame_times</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.to_tensor", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.to_tensor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.avrates", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  indices to calculate average rates over</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: average firing rates across specified indices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.shift_stim_fixation", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  stimulus tensor to shift</li>\n<li><strong>shift:</strong>  amount to shift by (in units of bars)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>shstim: shifted stimulus tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.create_valid_indices", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.create_valid_indices", "kind": "function", "doc": "<p>This creates self.valid_inds vector that is used for __get_item__ \n-- Will default to num_lags following each saccade beginning</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>post_sacc_gap:</strong>  number of lags to ignore following each saccade</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets self.valid_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">post_sacc_gap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.crossval_setup", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<p>Args: \n    folds: number of folds to partition data into\n    random_gen: whether to pick random fixations for validation or uniformly distributed\n    test_set: whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets\n    verbose: whether to print out information about the partitioning</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.fold_sample", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  number of items to partition</li>\n<li><strong>folds:</strong>  number of folds to partition into</li>\n<li><strong>random_gen:</strong>  whether to randomly partition or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: indices of items to be used for validation\n  rem_items: indices of items to be used for remainder</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.bar1d_datasets_single.Bar1D.get_max_samples", "modulename": "NTdatasets.conway.bar1d_datasets_single", "qualname": "Bar1D.get_max_samples", "kind": "function", "doc": "<p>get the maximum number of samples that fit in memory -- for GLM/GQM x LBFGS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dataset:</strong>  the dataset to get the samples from</li>\n<li><strong>device:</strong>  the device to put the samples on</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>maxsamples: the maximum number of samples that can fit on the device</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpu_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nquad</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"mf\">1.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets", "modulename": "NTdatasets.conway.cloud_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds", "kind": "class", "doc": "<p>-- can load batches from multiple datasets\n-- hdf5 files must have the following information:\n    Robs\n    RobsMU\n    stim: 4-d stimulus: time x nx x ny x color\n    block_inds: start and stop of 'trials' (perhaps fixations for now)\n    other things: saccades? or should that be in trials? </p>\n\n<p>Constructor will take eye position, which for now is an input from data\ngenerated in the session (not on disk). It should have the length size \nof the total number of fixations x1.</p>\n\n<p>Input arguments (details):\n    stim_crop = None, should be of form [x1, x2, y1, y2] where each number is the \n        extreme point to be include as an index, e.g. range(x1, x2+1), ...</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.__init__", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.__init__", "kind": "function", "doc": "<p>Constructor options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames (list):</strong>  list of strings with filenames (without .mat) to load</li>\n<li><strong>datadir (str):</strong>  directory where data is stored</li>\n<li><strong>time_embed (int):</strong>  0, 1, or 2. 0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded</li>\n<li><strong>num_lags (int):</strong>  number of lags to use in time-embedding</li>\n<li><strong>include_MUs (bool):</strong>  whether to include MUs in the dataset</li>\n<li><strong>drift_interval (int):</strong>  number of blocks to include in drift term</li>\n<li><strong>trial_sample (bool):</strong>  whether to sample trials randomly</li>\n<li><strong>device (torch.device):</strong>  device to store data on</li>\n<li><strong>which_stim (str or int):</strong>  'et' or 0, or 1 for lam, but default assemble later</li>\n<li><strong>stim_crop (list):</strong>  should be list/array of 4 numbers representing inds of edges</li>\n<li><strong>luminance_only (bool):</strong>  whether to use only luminance channel</li>\n<li><strong>ignore_saccades (bool):</strong>  whether to ignore saccades</li>\n<li><strong>folded_lags (bool):</strong>  whether to fold lags into channels</li>\n<li><strong>binocular (bool):</strong>  whether to include separate filters for each eye</li>\n<li><strong>eye_config (int):</strong>  0 = all, 1, -1, and 2 are options (2 = binocular)</li>\n<li><strong>maxT (int):</strong>  maximum number of time points to include</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trial_sample</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">luminance_only</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_saccades</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">folded_lags</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">binocular</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eye_config</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">maxT</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.stim_crop", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.stim_crop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.folded_lags", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.folded_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.eye_config", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.eye_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.binocular", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.binocular", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.luminance_only", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.luminance_only", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.generate_Xfix", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.output_separate_eye_stim", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.output_separate_eye_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.start_t", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.start_t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.drift_interval", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.drift_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.fhandles", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.avRs", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.fix_n", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.fix_n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.used_inds", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.NT", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.num_blks", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.num_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.data_threshold", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.data_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.file_index", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.sacc_inds", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.stim_shifts", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.stim_shifts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.LRpresent", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.LRpresent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.binocular_gain", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.binocular_gain", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.startT", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.startT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.train_inds", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.val_inds", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.train_blks", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.train_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.val_blks", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.val_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.preload_numpy", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li>None</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.is_fixpoint_present", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.is_fixpoint_present", "kind": "function", "doc": "<p>Return if any of fixation point is within the box given by top-left to bottom-right corner</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boxlim</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.assemble_stimulus", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.assemble_stimulus", "kind": "function", "doc": "<p>This assembles a stimulus from the raw numpy-stored stimuli into self.stim\nwhich_stim: determines what stimulus is assembled from 'ET'=0, 'lam'=1, None\n    If none, will need top_corner present: can specify with four numbers (top-left, bot-right)\n    or just top_corner and L\nwhich is torch.tensor on default device\nstim_wrap: only works if using 'which_stim', and will be [hwrap, vwrap]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>which_stim (int):</strong>  0 for ET, 1 for laminar probe, None for assembly from top_corner</li>\n<li><strong>stim_wrap (list):</strong>  [hwrap, vwrap] for wrapping stimulus</li>\n<li><strong>stim_crop (list):</strong>  [x1, x2, y1, y2] for cropping stimulus</li>\n<li><strong>top_corner (list):</strong>  [x1, y1] for top corner of stimulus</li>\n<li><strong>L (int):</strong>  length of stimulus</li>\n<li><strong>time_embed (int):</strong>  number of time lags to embed</li>\n<li><strong>num_lags (int):</strong>  number of lags to use</li>\n<li><strong>luminance_only (bool):</strong>  whether to use only luminance channel</li>\n<li><strong>shifts (list):</strong>  [dx, dy] for shifting stimulus</li>\n<li><strong>BUF (int):</strong>  buffer for shifting stimulus</li>\n<li><strong>shift_times (list):</strong>  times to shift stimulus</li>\n<li><strong>LMS (bool):</strong>  whether to convert to cone-isolating stimulus</li>\n<li><strong>fixdot (int):</strong>  value for fixation point</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stim_wrap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">top_corner</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">L</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">luminance_only</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">shifts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">BUF</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">shift_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">LMS</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fixdot</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.to_tensor", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.to_tensor", "kind": "function", "doc": "<p>Converts all relevant data to torch.tensor on device</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device (torch.device):</strong>  device to move data to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.time_embedding", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.time_embedding", "kind": "function", "doc": "<p>Note this overloads SensoryBase because reshapes in full dimensions to handle folded_lags</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (torch.tensor):</strong>  stimulus to time-embed</li>\n<li><strong>nlags (int):</strong>  number of lags to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>torch.tensor: time-embedded stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nlags</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.rectangle_overlap_ranges", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.rectangle_overlap_ranges", "kind": "function", "doc": "<p>Figures out ranges to write relevant overlap of B onto A\nAll info is of form [x0, y0, x1, y1]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>A (list):</strong>  [x0, y0, x1, y1]</li>\n<li><strong>B (list):</strong>  [x0, y0, x1, y1]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: ranges to write to A from B</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.wrap_stim", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.wrap_stim", "kind": "function", "doc": "<p>Take existing stimulus and move the whole thing around in horizontal and/or vertical dims,\nincluding if time_embedded</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>vwrap (int):</strong>  vertical wrap</li>\n<li><strong>hwrap (int):</strong>  horizontal wrap</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">vwrap</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">hwrap</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.crop_stim", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.crop_stim", "kind": "function", "doc": "<p>Crop existing (torch) stimulus and change relevant variables [x1, x2, y1, y2]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim_crop (list):</strong>  [x1, x2, y1, y2]</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.process_fixations", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.process_fixations", "kind": "function", "doc": "<p>Processes fixation informatiom from dataset, but also allows new saccade detection\nto be input and put in the right format within the dataset (main use)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sacc_in (np.ndarray):</strong>  saccade times</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacc_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.augment_dfs", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.augment_dfs", "kind": "function", "doc": "<p>Replaces data-filter for given cells. note that new_df should be np.ndarray</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new_dfs (np.ndarray):</strong>  new datafilters</li>\n<li><strong>cells (list):</strong>  cells to replace datafilters for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_dfs</span>, </span><span class=\"param\"><span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.draw_stim_locations", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.draw_stim_locations", "kind": "function", "doc": "<p>Draws stimulus locations</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>top_corner (list):</strong>  top corner of stimulus</li>\n<li><strong>L (int):</strong>  length of stimulus</li>\n<li><strong>row_height (float):</strong>  height of row</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">top_corner</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">row_height</span><span class=\"o\">=</span><span class=\"mf\">5.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.avrates", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds (list):</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: average firing rates</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.shift_stim", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.shift_stim", "kind": "function", "doc": "<p>Shift stimulus given standard shifting input (TBD)\nuse 'shift-times' if given shifts correspond to range of times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_shifts (np.ndarray):</strong>  shifts to apply</li>\n<li><strong>metrics (np.ndarray):</strong>  metric to apply threshold</li>\n<li><strong>metric_threshold (float):</strong>  threshold for metric</li>\n<li><strong>ts_thresh (int):</strong>  threshold for number of timepoints</li>\n<li><strong>shift_times (list):</strong>  times to shift stimulus</li>\n<li><strong>already_lagged (bool):</strong>  whether stimulus is already lagged</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos_shifts</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric_threshold</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ts_thresh</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">shift_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">already_lagged</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.shift_stim_fixation", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (torch.tensor):</strong>  stimulus to shift</li>\n<li><strong>shift (float):</strong>  shift amount</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>torch.tensor: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.create_valid_indices", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.create_valid_indices", "kind": "function", "doc": "<p>This creates self.valid_inds vector that is used for __get_item__ \n-- Will default to num_lags following each saccade beginning</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>post_sacc_gap (int):</strong>  gap following saccade</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">post_sacc_gap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.crossval_setup", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  number of folds </li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>test_set:</strong>  whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</li>\n<li><strong>verbose:</strong>  whether to print out information</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.cloud_datasets.ColorClouds.get_max_samples", "modulename": "NTdatasets.conway.cloud_datasets", "qualname": "ColorClouds.get_max_samples", "kind": "function", "doc": "<p>get the maximum number of samples that fit in memory -- for GLM/GQM x LBFGS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gpu_n (int):</strong>  gpu number</li>\n<li><strong>history_size (int):</strong>  history size</li>\n<li><strong>nquad (int):</strong>  number of quadrature points</li>\n<li><strong>num_cells (int):</strong>  number of cells</li>\n<li><strong>buffer (float):</strong>  buffer size</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: maximum number of samples that fit in memory</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpu_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nquad</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"mf\">1.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets", "modulename": "NTdatasets.conway.hartley_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset", "kind": "class", "doc": "<p>Parent class meant to hold standard variables and functions used by general sensory datasets</p>\n\n<p>General consistent formatting:\n-- self.robs, dfs, and any design matrices are generated as torch vectors on device\n-- stimuli are imported separately as dataset-specific numpy arrays, and but then prepared into \n    self.stim (tensor) by a function self.prepare_stim, which must be overloaded\n-- self.stim_dims gives the dimension of self.stim in 4-dimensional format\n-- all tensors are stored on default device (cpu)</p>\n\n<p>General book-keeping variables\n-- self.block_inds is empty but must be filled in by specific datasets</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.__init__", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.__init__", "kind": "function", "doc": "<p>Class for Hartley dataset</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames (list):</strong>  List of strings of filenames to load</li>\n<li><strong>datadir (str):</strong>  Directory where data is stored</li>\n<li><strong>time_embed (int):</strong>  Time embedding of stimulus</li>\n<li><strong>num_lags (int):</strong>  Number of lags for time embedding</li>\n<li><strong>include_MUs (bool):</strong>  Include multi-units in dataset</li>\n<li><strong>drift_interval (int):</strong>  Interval for drift term</li>\n<li><strong>trial_sample (bool):</strong>  Sample trials for cross-validation</li>\n<li><strong>device (torch.device):</strong>  Device for pytorch tensors</li>\n<li><strong>ignore_saccades (bool):</strong>  Ignore saccades in dataset</li>\n<li><strong>binocular (bool):</strong>  Include binocular data</li>\n<li><strong>eye_config (int):</strong>  Eye configuration for dataset</li>\n<li><strong>maxT (int):</strong>  Maximum number of time points to load</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trial_sample</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_saccades</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">binocular</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eye_config</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">maxT</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.eye_config", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.eye_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.binocular", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.binocular", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.generate_Xfix", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.output_separate_eye_stim", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.output_separate_eye_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.start_t", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.start_t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.drift_interval", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.drift_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.fhandles", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.avRs", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.one_hots", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.one_hots", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.meta_dims", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.meta_dims", "kind": "variable", "doc": "<p>EYE configuration</p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.hartley_metadata", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.hartley_metadata", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.meta", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.meta", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.OHcov", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.OHcov", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.fix_n", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.fix_n", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.used_inds", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.NT", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.num_blks", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.num_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.data_threshold", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.data_threshold", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.file_index", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.sacc_inds", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stim_shifts", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stim_shifts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.meta_shift", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.meta_shift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.maxT", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.maxT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.SUs", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.SUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.channel_mapSU", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.channel_mapSU", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.channel_rating", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.channel_rating", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.fix_location", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.fix_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.fix_size", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.fix_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stim_location", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stim_location", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stim_locationET", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stim_locationET", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stimscale", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stimscale", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stim_pos", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stim_pos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.ETtrace", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.ETtrace", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.ETtraceHR", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.ETtraceHR", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.dims", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.stim_dims", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.stim_dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.LRpresent", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.LRpresent", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.startT", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.startT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.crossval_setup", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.crossval_setup", "kind": "function", "doc": "<p>Setup cross-validation indices</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.preload_numpy", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.to_tensor", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.to_tensor", "kind": "function", "doc": "<p>Convert numpy arrays to pytorch tensors</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device (torch.device):</strong>  Device for pytorch tensors</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.is_fixpoint_present", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.is_fixpoint_present", "kind": "function", "doc": "<p>Return if any of fixation point is within the box given by top-left to bottom-right corner</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boxlim (list):</strong>  List of top-left and bottom-right corner of box</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if fixation point is within box, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boxlim</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.assemble_metadata", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.assemble_metadata", "kind": "function", "doc": "<p>This assembles the Hartley metadata from the raw numpy-stored metadata into self.meta</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_embed (int):</strong>  Time embedding of metadata</li>\n<li><strong>num_lags (int):</strong>  Number of lags for time embedding</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.process_fixations", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.process_fixations", "kind": "function", "doc": "<p>Processes fixation informatiom from dataset, but also allows new saccade detection\nto be input and put in the right format within the dataset (main use)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sacc_in (np.ndarray):</strong>  Saccade indices</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">sacc_in</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.augment_dfs", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.augment_dfs", "kind": "function", "doc": "<p>Replaces data-filter for given cells. note that new_df should be np.ndarray</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>new_dfs (np.ndarray):</strong>  New data-filters</li>\n<li><strong>cells (list):</strong>  List of cells to replace data-filters</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">new_dfs</span>, </span><span class=\"param\"><span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.draw_stim_locations", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.draw_stim_locations", "kind": "function", "doc": "<p>Draw stimulus locations</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>top_corner (list):</strong>  Top corner of rectangle</li>\n<li><strong>L (int):</strong>  Length of rectangle</li>\n<li><strong>row_height (float):</strong>  Height of row</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">top_corner</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"mi\">60</span>, </span><span class=\"param\"><span class=\"n\">row_height</span><span class=\"o\">=</span><span class=\"mf\">5.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.avrates", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds (list):</strong>  Indices to calculate average firing probability</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Average firing probability</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.shift_stim", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.shift_stim", "kind": "function", "doc": "<p>Shift stimulus given standard shifting input (TBD)\nuse 'shift-times' if given shifts correspond to range of times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_shifts (np.ndarray):</strong>  Position shifts</li>\n<li><strong>metrics (np.ndarray):</strong>  Metrics for shifting</li>\n<li><strong>metric_threshold (int):</strong>  Metric threshold</li>\n<li><strong>ts_thresh (int):</strong>  Time shift threshold</li>\n<li><strong>shift_times (list):</strong>  Shift times</li>\n<li><strong>already_lagged (bool):</strong>  Already lagged</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos_shifts</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric_threshold</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ts_thresh</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">shift_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">already_lagged</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.shift_meta", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.shift_meta", "kind": "function", "doc": "<p>Shift the relevant Hartley metadata.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pos_shifts (np.ndarray):</strong>  Position shifts</li>\n<li><strong>metrics (np.ndarray):</strong>  Metrics for shifting</li>\n<li><strong>metric_threshold (int):</strong>  Metric threshold</li>\n<li><strong>ts_thresh (int):</strong>  Time shift threshold</li>\n<li><strong>shift_times (list):</strong>  Shift times</li>\n<li><strong>already_lagged (bool):</strong>  Already lagged</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Shifted metadata</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pos_shifts</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric_threshold</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ts_thresh</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">shift_times</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">already_lagged</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.shift_stim_fixation", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (np.ndarray):</strong>  Stimulus</li>\n<li><strong>shift (int):</strong>  Shift</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: Shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.create_valid_indices", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.create_valid_indices", "kind": "function", "doc": "<p>This creates self.valid_inds vector that is used for __get_item__ \n-- Will default to num_lags following each saccade beginning</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>post_sacc_gap (int):</strong>  Post-saccade gap</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">post_sacc_gap</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.hartley_datasets.HartleyDataset.one_hot_encoder", "modulename": "NTdatasets.conway.hartley_datasets", "qualname": "HartleyDataset.one_hot_encoder", "kind": "function", "doc": "<p>One-hot encoder for array</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>arr (np.ndarray):</strong>  Array to encode</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.ndarray: One-hot encoded array</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">arr</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets", "modulename": "NTdatasets.conway.multi_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds", "kind": "class", "doc": "<p>-- can load batches from multiple datasets\n-- hdf5 files must have the following information:\n    Robs\n    RobsMU\n    stim: 4-d stimulus: time x nx x ny x color\n    block_inds: start and stop of 'trials' (perhaps fixations for now)\n    other things: saccades? or should that be in trials? </p>\n\n<p>Constructor will take eye position, which for now is an input from data\ngenerated in the session (not on disk). It should have the length size \nof the total number of fixations x1.</p>\n\n<p>Input arguments (details):\n    stim_crop = None, should be of form [x1, x2, y1, y2] where each number is the \n        extreme point to be include as an index, e.g. range(x1, x2+1), ...</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.__init__", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.__init__", "kind": "function", "doc": "<p>Constructor options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames (list):</strong>  list of strings of the filenames to be loaded</li>\n<li><strong>datadir (str):</strong>  directory where the data is stored</li>\n<li><strong>num_lags (int):</strong>  number of lags to include in the stimulus</li>\n<li><strong>include_MUs (bool):</strong>  whether to include multi-units in the dataset</li>\n<li><strong>drift_interval (int):</strong>  number of blocks to include in the drift term</li>\n<li><strong>trial_sample (bool):</strong>  whether to sample trials for train/val/test</li>\n<li><strong>luminance_only (bool):</strong>  whether to only include luminance in the stimulus</li>\n<li><strong>binocular (bool):</strong>  whether to include separate filters for each eye</li>\n<li><strong>eye_config (int):</strong>  which eye configuration to use (0=all, 1=left, 2=right, 3=binocular)</li>\n<li><strong>eye_contiguous (bool):</strong>  whether to only use contiguous eye configurations</li>\n<li><strong>cell_lists (list):</strong>  list of lists of cell indices to include in the dataset</li>\n<li><strong>device (torch.device):</strong>  device to store the data on</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">trial_sample</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">luminance_only</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">LMS</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">binocular</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">eye_config</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">eye_contiguous</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cell_lists</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.time_embed", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.time_embed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.Nexpts", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.Nexpts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.eye_config", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.eye_config", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.eye_contiguous", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.eye_contiguous", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.binocular", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.binocular", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.luminance_only", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.luminance_only", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.includeMUs", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.includeMUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.generate_Xfix", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.generate_Xfix", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.output_separate_eye_stim", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.output_separate_eye_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.expt_stims", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.expt_stims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.L", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.L", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.LMS", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.LMS", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.start_t", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.start_t", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.drift_interval", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.drift_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.used_inds", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.NT", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.fhandles", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.file_info", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.file_info", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.exptNT", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.exptNT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.exptNBLK", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.exptNBLK", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.exptNC", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.exptNC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.exptNA", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.exptNA", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.expt_tstart", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.expt_tstart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.expt_blkstart", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.expt_blkstart", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.tranges", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.tranges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.cranges", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.cranges", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.block_inds", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.NC", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.sacc_inds", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.sacc_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.stim_shifts", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.stim_shifts", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.read_file_info", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.read_file_info", "kind": "function", "doc": "<p>Initial processing of each file to pull out salient info needed to put data together for\nmultiexperiment dataset: particularly for building stim and responses, and trial-indexing</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_n (int):</strong>  index of the file</li>\n<li><strong>filename (str):</strong>  name of the file</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: dictionary of file information</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">file_n</span>, </span><span class=\"param\"><span class=\"n\">filename</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.parse_trial_times_expt", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.parse_trial_times_expt", "kind": "function", "doc": "<p>Makes block_inds for the trange within a given experiment, indexed to the beginning of the expt</p>\n\n<p>Args: \n    expt_n (int): which experiment\n    trange (array): times in the experiment to include</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>e_block_inds: a list of the indices associated with each trial\n  bmap: list of trials that were included within the experiment</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span>, </span><span class=\"param\"><span class=\"n\">trange</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.modify_included_cells", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.modify_included_cells", "kind": "function", "doc": "<p>Modify the included cells in the dataset</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>clists (list):</strong>  list of lists of cell indices to include in the dataset</li>\n<li><strong>expt_n (int):</strong>  index of the experiment to modify</li>\n<li><strong>reset_cell_lists (Boolean):</strong>  whether to reset DFs to default if not included in list</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">clists</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">reset_cell_lists</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.modify_expt_time_range", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.modify_expt_time_range", "kind": "function", "doc": "<p>there is an existing trange -- trange assumed to be absolute_time_scale, but could be mod</p>\n\n<h1 id=\"selftrangesff-selffile_infofftmap\">self.tranges[ff] = self.file_info[ff]['tmap']</h1>\n\n<h1 id=\"will-have-to-change-selftranges-re-assemble_robs-and-rebuild-stim-if-built-already\">will have to change self.tranges, re-assemble_robs, and rebuild stim (if built already)</h1>\n\n<h1 id=\"will-also-have-to-go-through-and-trim-out-irrelevant-trials-and-renumber-how-do-this\">will also have to go through and trim out irrelevant trials, and renumber -- how do this?</h1>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trange</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">absolute_time_scale</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.generate_array_cell_list", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.generate_array_cell_list", "kind": "function", "doc": "<p>Formula for generating cell list given channel maps and basic eligibility</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expt_n (int):</strong>  index of the experiment</li>\n<li><strong>which_array (int or str):</strong>  which array to generate the cell list for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: array of cell indices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">which_array</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.assemble_robs", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.assemble_robs", "kind": "function", "doc": "<p>Takes current information (robs and dfs) to make robs and dfs (full version).\nThis uses the info in self.tranges() and squares with the file_info.\nIt will also re-generate block_inds\n** Note this can be replaced by using the spike times explicitly</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">reset_dfs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.list_expts", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.list_expts", "kind": "function", "doc": "<p>Show filenames with experiment number</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.updateDF", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.updateDF", "kind": "function", "doc": "<p>Import updated DF for given experiment, as numbered (can see with 'list_expts')\nWill check for neurons with no spikes and reduce robs and dataset if reduce_cells=True</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dfs (np.array):</strong>  array of new dfs</li>\n<li><strong>expt_n (int):</strong>  index of the experiment, default=0</li>\n<li><strong>reduce_cells (bool):</strong>  whether to reduce the number of cells</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">dfs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">reduce_cells</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.trialfilter_dfs", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.trialfilter_dfs", "kind": "function", "doc": "<p>Zeros out dfs at the beginning of trials up to num_lags</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.assemble_saccade_inds", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.assemble_saccade_inds", "kind": "function", "doc": "<p>Assemble saccade indices for all experiments</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.is_fixpoint_present", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.is_fixpoint_present", "kind": "function", "doc": "<p>Return if any of fixation point is within the box given by top-left to bottom-right corner</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>boxlim (list):</strong>  list of four numbers (top-left, bot-right)</li>\n<li><strong>expt_n (int):</strong>  index of the experiment</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: whether the fixation point is present</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">boxlim</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.build_stim", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.build_stim", "kind": "function", "doc": "<p>This assembles a stimulus from the raw numpy-stored stimuli into self.stim\nwhich_stim: determines what stimulus is assembled from 'ET'=0, 'lam'=1, None\n    If none, will need top_corner present: can specify with four numbers (top-left, bot-right)\n    or just top_corner and L\nwhich is torch.tensor on default device\nstim_wrap: only works if using 'which_stim', and will be [hwrap, vwrap]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expt_n (int):</strong>  index of the experiment</li>\n<li><strong>which_stim (int or str):</strong>  which stimulus to use</li>\n<li><strong>top_corner (list):</strong>  top corner of the stimulus</li>\n<li><strong>L (int):</strong>  size of the stimulus</li>\n<li><strong>time_embed (int):</strong>  time embedding</li>\n<li><strong>eyepos (np.array):</strong>  eye position</li>\n<li><strong>BUF (int):</strong>  buffer for eye position</li>\n<li><strong>stim_crop (list):</strong>  crop the stimulus</li>\n<li><strong>LMS (bool):</strong>  whether to use LMS</li>\n<li><strong>fixdot (int):</strong>  fixation point</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">which_stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">top_corner</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">L</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">eyepos</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">BUF</span><span class=\"o\">=</span><span class=\"mi\">20</span>,</span><span class=\"param\">\t<span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">LMS</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">fixdot</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.assemble_stim", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.assemble_stim", "kind": "function", "doc": "<p>Assemble stimulus from all experiments into self.stim</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.time_embedding", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.time_embedding", "kind": "function", "doc": "<p>Note this overloads SensoryBase because reshapes in full dimensions to handle folded_lags</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (np.array):</strong>  stimulus to time-embed</li>\n<li><strong>nlags (int):</strong>  number of lags</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: time-embedded stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nlags</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.rectangle_overlap_ranges", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.rectangle_overlap_ranges", "kind": "function", "doc": "<p>Figures out ranges to write relevant overlap of B onto A\nAll info is of form [x0, y0, x1, y1]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>A (list):</strong>  first rectangle</li>\n<li><strong>B (list):</strong>  second rectangle</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict: dictionary of ranges</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span>, </span><span class=\"param\"><span class=\"n\">B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.crop_stim", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.crop_stim", "kind": "function", "doc": "<p>Crop existing (torch) stimulus and change relevant variables [x1, x2, y1, y2]</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim0 (np.array):</strong>  stimulus to crop</li>\n<li><strong>stim_crop (list):</strong>  crop the stimulus</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: cropped stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim0</span>, </span><span class=\"param\"><span class=\"n\">stim_crop</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.draw_stim_locations", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.draw_stim_locations", "kind": "function", "doc": "<p>Draw stimulus locations for given experiment</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expt_n (int):</strong>  index of the experiment</li>\n<li><strong>top_corner (list):</strong>  top corner of the stimulus</li>\n<li><strong>L (int):</strong>  size of the stimulus</li>\n<li><strong>row_height (float):</strong>  height of the row</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">top_corner</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">L</span><span class=\"o\">=</span><span class=\"mi\">60</span>, </span><span class=\"param\"><span class=\"n\">row_height</span><span class=\"o\">=</span><span class=\"mf\">5.0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.restrict2good_fixations", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.restrict2good_fixations", "kind": "function", "doc": "<p>Modifies data_filters with valid fixation data. For now, would need \nto re-run assemble_robs. ETmetrics can be for all experiments (if list), or just one</p>\n\n<p>Args: \n    ETmetrics: array that is length of trange[ee]. This metric that is best correlated \n        with fixation quality and has a range in the 0.8-1.0 (where 0.8 is best). Make this\n        a list of ETmetrics (one item for each expt) if passing in multiple.\n    expt_n: which experiment to apply metrics to. Will assume all if ETmetrics is a list, or\n        expt 0 if ETmetrics is just a single value\n    thresh: metric threshold (between 0.8-1, default=0.9), with lower corresponding to better qual</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None, but modifies self.dfs accordingly</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">ETmetrics</span>, </span><span class=\"param\"><span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.9</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.avrates", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds (list):</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: average firing rates</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.shift_stim_oldstyle", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.shift_stim_oldstyle", "kind": "function", "doc": "<p>Shift stimulus given standard shifting input (TBD)\nuse 'shift-times' if given shifts correspond to range of times</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (np.array):</strong>  stimulus to shift</li>\n<li><strong>pos_shifts (np.array):</strong>  shifts to apply</li>\n<li><strong>metrics (np.array):</strong>  metrics to apply</li>\n<li><strong>metric_threshold (float):</strong>  metric threshold</li>\n<li><strong>ts_thresh (int):</strong>  time threshold</li>\n<li><strong>fix_n (np.array):</strong>  fixations</li>\n<li><strong>shift_times (np.array):</strong>  times to shift</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pos_shifts</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">metric_threshold</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">ts_thresh</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">fix_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">shift_times</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.process_fixations", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.process_fixations", "kind": "function", "doc": "<p>Generates fix_n based on existing trial structure and imported fixations. Will only work for specified\nexperiment (expt_n variable) and assume timings are based on the beginning of that experiment.\nOutput: fix_n</p>\n\n<p>Default: modify_dfs=True will zero out data where there is no assigned fixation</p>\n\n<p>Note that this will assume that saccades correspond to relevant trange (e.g., binocular section) rather\nthan the whole experiment.</p>\n\n<p>Can also use metric criteria to only use fraction of total saccades: sacc_metrics can be amplitude, and \nsacc_thresh be inclusion criteria (must be greater than sacc_thresh)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sacc_in (np.array):</strong>  saccade times</li>\n<li><strong>expt_n (int):</strong>  index of the experiment</li>\n<li><strong>sacc_metrics (np.array):</strong>  saccade metrics</li>\n<li><strong>thresh (float):</strong>  threshold for saccade metrics</li>\n<li><strong>dur_thresh (int):</strong>  duration threshold</li>\n<li><strong>modify_dfs (bool):</strong>  modify dfs</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: fixation numbers</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sacc_in</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">expt_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">sacc_metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">dur_thresh</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">modify_dfs</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.shift_stim", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.shift_stim", "kind": "function", "doc": "<p>Shift stimulus based on eye position</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim (np.array):</strong>  stimulus to shift</li>\n<li><strong>eyepos (np.array):</strong>  eye position</li>\n<li><strong>input_dims (list):</strong>  input dimensions</li>\n<li><strong>batch_size (int):</strong>  batch size</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>np.array: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">eyepos</span>, </span><span class=\"param\"><span class=\"n\">input_dims</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">5000</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.shift_im", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.shift_im", "kind": "function", "doc": "<p>Primary function for shifting the intput stimulus</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  [Batch x channels x height x width] (use Fold2d to fold lags if necessary)</li>\n<li><strong>shift:</strong>  [Batch x 2] or [Batch x 4] if translation only or affine</li>\n<li><strong>affine:</strong>  [Boolean] set to True if using affine transformation</li>\n<li><strong>mode:</strong>  [str] 'bilinear' (default) or 'nearest'</li>\n<li><strong>batch_size:</strong>  [int] if None, will use all data at once</li>\n<li><strong>NOTE:</strong>  mode must be bilinear during fitting otherwise the gradients don't propogate well</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>torch.tensor: shifted stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span>, </span><span class=\"param\"><span class=\"n\">affine</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">&#39;nearest&#39;</span>, </span><span class=\"param\"><span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.get_max_samples", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.get_max_samples", "kind": "function", "doc": "<p>get the maximum number of samples that fit in memory -- for GLM/GQM x LBFGS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gpu_n (int):</strong>  GPU number</li>\n<li><strong>history_size (int):</strong>  history size</li>\n<li><strong>nquad (int):</strong>  number of quadrature points</li>\n<li><strong>num_cells (int):</strong>  number of cells</li>\n<li><strong>buffer (float):</strong>  buffer size</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: maximum number of samples</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpu_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nquad</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"mf\">1.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.multi_datasets.MultiClouds.preload_numpy", "modulename": "NTdatasets.conway.multi_datasets", "qualname": "MultiClouds.preload_numpy", "kind": "function", "doc": "<p>Note this loads stimulus but does not time-embed</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.conway.synthcloud_datasets", "modulename": "NTdatasets.conway.synthcloud_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData", "kind": "class", "doc": "<p>Data set for simulted cloud data. It is assumed that the data has already been compiled as an HDF5 file.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.__init__", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>file_name:</strong>  Name of the HDF5 file to be used as a string.</li>\n<li><strong>block_len:</strong>  Number of time points in each block. Must be a multiple of the total number of time points. (Defalut 1000)</li>\n<li><strong>down_sample:</strong>  How much to down sample the stim. If down_sample=2 and stim is of dimension LxL brings down to L/2xL/2. (Default 2)</li>\n<li><strong>num_lags:</strong>  How many time points to lag by. (Default 12)</li>\n<li><strong>cell_idx:</strong>  Index of cells to use as list. (Default None)</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">file_name</span>,</span><span class=\"param\">\t<span class=\"n\">block_len</span><span class=\"o\">=</span><span class=\"mi\">1000</span>,</span><span class=\"param\">\t<span class=\"n\">down_sample</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">cell_idx</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.trial_sample", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.trial_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.block_len", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.block_len", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.NT", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.stim_dims", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.stim_dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.NB", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.NB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.block_inds", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.val_inds", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.train_inds", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.train_blks", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.train_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.val_blks", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.val_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.num_lags", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.num_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.conway.synthcloud_datasets.SimCloudData.dfs", "modulename": "NTdatasets.conway.synthcloud_datasets", "qualname": "SimCloudData.dfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming", "modulename": "NTdatasets.cumming", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.BinocUtils", "modulename": "NTdatasets.cumming.BinocUtils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.BinocUtils.varDF", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "varDF", "kind": "function", "doc": "<p>Calculates variance over valid data. \nmean_adj means true variance, but take away and becomes average squared deviation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>s:</strong>  signal to calculate variance over</li>\n<li><strong>df:</strong>  data filter (if None, will use all data)</li>\n<li><strong>mean_adj:</strong>  whether to subtract mean before squaring</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>variance of signal</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">s</span>, </span><span class=\"param\"><span class=\"n\">df</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">mean_adj</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.explainable_variance", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "explainable_variance", "kind": "function", "doc": "<p>Explainable variance calculation: binocular-specific because of the data structures</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>Edata:</strong>  binocular dataset (one experiment with a certain number of cells recorded)</li>\n<li><strong>cell_n:</strong>  cell number (in python numbering, i.e. starting with 0)</li>\n<li><strong>fr1or3:</strong>  whether to use fr1==1, fr3==3, or both (leave as None) to calculate disparity. Should choose 1 or 3</li>\n<li><strong>inds (def:</strong>  None): indices to calculate variances over, if None will use all inds\ngenerally will pass in the fr3 indices, for example</li>\n<li><strong>verbose (def:</strong>  True): self-explanatory</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>totvar: literally the variance of the binned spike counts (resp) -- will be dom by spike stoch.\n  explvar: explainable variance: repeatable variance (small fraction of totvar)</p>\n</blockquote>\n\n<p>Note: will return total variance (and a warning) if repeats not present in the dataset.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">Edata</span>, </span><span class=\"param\"><span class=\"n\">cell_n</span>, </span><span class=\"param\"><span class=\"n\">fr1or3</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.predictive_power", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "predictive_power", "kind": "function", "doc": "<p>Predictive power calculation (R2 adjusted by dividing by explainable (rather than total) variance\n(binocular-specific because of the data structures)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pred:</strong>  model prediction: must have same size as robs (unindexed)</li>\n<li><strong>Edata:</strong>  binocular dataset (one experiment with a certain number of cells recorded)</li>\n<li><strong>cell_n:</strong>  cell number (in python numbering, i.e. starting with 0)</li>\n<li><strong>inds (def:</strong>  None): indices to calculate variances over, if None will use all inds\nBUT it should pass in XVinds generally, and for example could also focus on fr3</li>\n<li><strong>verbose (def:</strong>  True): self-explanatory</li>\n</ul>\n\n<p>Returns: \n    predictive power of cell</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">pred</span>, </span><span class=\"param\"><span class=\"n\">Edata</span>, </span><span class=\"param\"><span class=\"n\">cell_n</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.disparity_matrix", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "disparity_matrix", "kind": "function", "doc": "<p>Create one-hot representation of disparities: NT x 2<em>ND+2 (ND = num disparities)\n-- Columns (0,ND-1):  correlated\n-- Columns (ND, 2</em>ND-1): anticorrelated\n-- Column -2: uncorrelated\n-- Column -1: blank</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dispt:</strong>  disparity values</li>\n<li><strong>corrt:</strong>  correlation values (if None, will not use)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dmat: one-hot representation of disparities</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">dispt</span>, </span><span class=\"param\"><span class=\"n\">corrt</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.disparity_tuning", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "disparity_tuning", "kind": "function", "doc": "<p>Compute disparity tuning (disparity vs time) -- returned in dictionary object\n-> include cell_n to use data_filters from the actual cell</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  binocular dataset (NTdatasets.binocular.single)</li>\n<li><strong>r:</strong>  response of the cell (or model) to use</li>\n<li><strong>cell_n:</strong>  cell number (in python numbering, i.e. starting with 0)</li>\n<li><strong>num_dlags:</strong>  number of lags to use in the time embedding</li>\n<li><strong>fr1or3:</strong>  whether to use fr1==1, fr3==3, or both (leave as None) to calculate disparity. Should choose 1 or 3</li>\n<li><strong>to_plot:</strong>  whether to plot the tuning curve</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Dinfo: dictionary with all the information about the disparity tuning curve</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">r</span>, </span><span class=\"param\"><span class=\"n\">cell_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_dlags</span><span class=\"o\">=</span><span class=\"mi\">8</span>, </span><span class=\"param\"><span class=\"n\">fr1or3</span><span class=\"o\">=</span><span class=\"mi\">3</span>, </span><span class=\"param\"><span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.disparity_predictions", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "disparity_predictions", "kind": "function", "doc": "<p>Calculates a prediction of the disparity (and timing) signals that can be inferred from the response\nby the disparity input alone. This puts a lower bound on how much disparity is driving the response, although\npractically speaking it generates the same disparity tuning curves for neurons.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  dataset (NTdatasets.binocular.single)</li>\n<li><strong>resp:</strong>  either Robs or predicted response across whole dataset -- leave blank if want neurons Robs</li>\n<li><strong>cell_n:</strong>  cell number (in python numbering, i.e. starting with 0)</li>\n<li><strong>fr1or3:</strong>  whether to use fr1==1, fr3==3, or both (leave as None) to calculate disparity. Should choose 1 or 3</li>\n<li><strong>indxs:</strong>  subset of data -- probably will not use given dfs and fr1or3</li>\n<li><strong>num_dlags:</strong>  how many lags to compute disparity/timing predictions using (default 8 is sufficient)</li>\n<li><strong>spiking:</strong>  whether to use Poisson loss function (spiking data) or Gaussian (continuous prediction): default True</li>\n<li><strong>rectified:</strong>  whether to rectify the predictions using softplus (since predicting spikes, generally)</li>\n</ul>\n\n<p>Returns: \n    Dpred: full disparity+timing prediction\n    Tpred: prediction using just frame refresh and blanks\n    Note that both will predict over the whole dataset, even if only used 1 part to fit</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span>,</span><span class=\"param\">\t<span class=\"n\">resp</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">cell_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">fr1or3</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">indxs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_dlags</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">spiking</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rectified</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.binocular_model_performance", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "binocular_model_performance", "kind": "function", "doc": "<p>Current best-practices for generating prediction quality of neuron and binocular tuning. Currently we\nare not worried about using cross-validation indices only (as they are based on much less data and tend to\notherwise be in agreement with full measures, but this option could be added in later versions.\nvalset can be None (use all val_inds, 'a' or 'b': use subset)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  binocular dataset (NTdatasets.binocular.single)</li>\n<li><strong>cell_n:</strong>  cell number (in python numbering, i.e. starting with 0)</li>\n<li><strong>Rpred:</strong>  predicted response of the model</li>\n<li><strong>valset:</strong>  which validation set to use (None, 'a', 'b')</li>\n<li><strong>verbose:</strong>  whether to print out results</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>BMP: dictionary with all the information about the binocular model performance</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cell_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">Rpred</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valset</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.compute_mfilters", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "compute_mfilters", "kind": "function", "doc": "<p>Calculates the filters of the first (monocular) stage of model given tkerns</p>\n\n<p>Args: \n    mod: binocular model with monocular subspace and implicit temporal basis embedded in stim\n    tkerns: temporal kernels, if none (default) than just returns first layer (but shouldn't)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mfilts: 3-d array space x lags x number of filters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mod</span>, </span><span class=\"param\"><span class=\"n\">tkerns</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.compute_binocular_filters_old", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "compute_binocular_filters_old", "kind": "function", "doc": "<p>Using standard binocular model, compute filters. defaults to first ffnet and\nnum_space = 36. Set num_space=None to go to minimum given convolutional constraints\n-> this is older function that might be outdated (see new function below)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binoc_mod:</strong>  binocular model</li>\n<li><strong>to_plot:</strong>  whether to plot the filters</li>\n<li><strong>cmap:</strong>  colormap to use</li>\n<li><strong>time_reverse:</strong>  whether to reverse the time axis</li>\n<li><strong>num_space:</strong>  number of spatial dimensions to use</li>\n<li><strong>ffnet_n:</strong>  which feed-forward network to use</li>\n<li><strong>mfilters:</strong>  monocular filters to use (if None, will use first layer of model)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bifilts: binocular filters</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binoc_mod</span>,</span><span class=\"param\">\t<span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">cmap</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_reverse</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">num_space</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ffnet_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mfilters</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.plot_sico_readout", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "plot_sico_readout", "kind": "function", "doc": "<p>Plot the readout weights of the SICO model</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sico:</strong>  SICO model</li>\n<li><strong>cell_n:</strong>  select which clone to plot if clone model (default: None, assumes single model)</li>\n<li><strong>rh:</strong>  height of plot, overriding scaling-per line (row_mult) (default: None)</li>\n<li><strong>row_mult:</strong>  normal way to determine depth of plot: inches per line (default: 0.4)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sico</span>, </span><span class=\"param\"><span class=\"n\">cell_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">rh</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">row_mult</span><span class=\"o\">=</span><span class=\"mf\">0.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.dist_mean", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "dist_mean", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">p</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.compute_bfilters", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "compute_bfilters", "kind": "function", "doc": "<p>Calculates binocular filter array for monocular-subspace model, including accounting for temporal kernels\nused to preprocess the input.\nAdjusts for skip_lags, although must enter by hand (default=0)</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>binoc_mod:</strong>  assumes temporal kernels processing input, and monocular subspace before binocular filters</li>\n<li><strong>tkerns:</strong>  temporal kernels that pre-processed stimulus</li>\n<li><strong>width:</strong>  how wide each monocular filter should be displayed: its convolutional so not set. Default\nis based on model itself: monocular filter with plus what binocular convolutions brings</li>\n<li><strong>newlags:</strong>  lags past what is given by filter (default none)</li>\n<li><strong>center:</strong>  centers each binocular filter based on mean temporal power (since it will be convolved too)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>eye_filts: binocular filters by eye with dims [2, width, lags, num_filters]</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">binoc_mod</span>,</span><span class=\"param\">\t<span class=\"n\">tkerns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">newlags</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">skip_lags</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">center</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.plot_mfilters", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "plot_mfilters", "kind": "function", "doc": "<p>Plots mfilters (first-layer monocular filters) of sico models, using compute_mfilters to calcuate. </p>\n\n<h6 id=\"inputs\">Inputs:</h6>\n\n<blockquote>\n  <p>model: sico model to plot monocular filters of\n  tkerns: temporal kernels used in sico model (default: None assumes no temporal filters used)\n  flip: whether to have lag-0 at bottom and go up (default: flip=True) or opposite\n  axis_labels: whether to display axis_labels (default: False=No)\n  max_lags: number of lags to trim at (default: 12)\n  rh: row height in units of inches (default: 2)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">tkerns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">axis_labels</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">max_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">rh</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.plot_bfilters", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "plot_bfilters", "kind": "function", "doc": "<p>Plots bfilters (second-layer binocular filters) of sico models, using compute_bfilters to calcuate. </p>\n\n<h6 id=\"inputs\">Inputs:</h6>\n\n<blockquote>\n  <p>model: sico model to plot monocular filters of\n  tkerns: temporal kernels used in sico model (default: None assumes no temporal filters used)\n  flip: whether to have lag-0 at bottom and go up (default: flip=True) or opposite\n  axis_labels: whether to display axis_labels (default: False=No)\n  max_lags: number of lags to trim at (default: 12)\n  rh: row height in units of inches (default: 2)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">tkerns</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">flip</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">axis_labels</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">max_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">rh</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.clone_model_selection", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "clone_model_selection", "kind": "function", "doc": "<p>Model selection from regularization -- find smallest regularization value within thresh of max\nThis is made for first-stage clone-sico models that have an ordering (from small to big)\nChoses earliest model that has LL greater than threshold</p>\n\n<h6 id=\"input\">Input:</h6>\n\n<blockquote>\n  <p>LLs: LL list for all the clones\n  thresh: fraction of max that threshold is selected for (default: 0.99)\n  LLthresh: explicit LL-threshold: overrides value of thresh, but default=None\n  verbose: to print inner workings or not</p>\n</blockquote>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>selection: index of clone that fits criteria</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">LLs</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.99</span>, </span><span class=\"param\"><span class=\"n\">LLthresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.reconstitute_bmodel", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "reconstitute_bmodel", "kind": "function", "doc": "<p>SiCo-model specific: makes reduced single-neuron model from larger-scale clone model,\nwhich generates many different instances of a single neuron model.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>clone_mod:</strong>  clone-sico model with many instances of single neuron models</li>\n<li><strong>cc:</strong>  which clone to take</li>\n<li><strong>verbose:</strong>  whether to suppress output (default: verbose=True)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>single_mod: sico single-neuron model</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clone_mod</span>, </span><span class=\"param\"><span class=\"n\">cc</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.bmp_check", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "bmp_check", "kind": "function", "doc": "<p>calculate binocular model performance (pred power and disparity power) for top num_cells in clone-model\nit uses LLs to sort from top, but also can explicitly enter 'cell_list', which supercedes\ncell_list trumps everything else</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>mod:</strong>  clone binocular model with lots of outputs</li>\n<li><strong>dataset:</strong>  dataset that can push through mod</li>\n<li><strong>LLs:</strong>  LLs of the mod. Should be able to generate internally, but would need null models</li>\n<li><strong>num_cells:</strong>  how many of the top cells/outputs to calculate with</li>\n<li><strong>valset:</strong>  whether to use 'a' or 'b' (devault is 'b')</li>\n<li><strong>cell_list:</strong>  superceded ordering by LLs, and just says which ccs to calculate performance for</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>pps: predictive powers of whole clone array, but non-zero for only cells that were computed here\n  dps: disparity-predictive powers for same deal as pps\n  cell_order: list of cells that were probed</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mod</span>, </span><span class=\"param\"><span class=\"n\">dataset</span>, </span><span class=\"param\"><span class=\"n\">LLs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">valset</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cell_list</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.subsample_mask", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "subsample_mask", "kind": "function", "doc": "<p>Generate mask to give binocular filters (numB) access to some number of monocular filters\nArgs\n    numM: size of monocular pool\n    numB: number of binocular filters\n    alpha: how many monocular filters each gets to sample </p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>mask that is [numM, conv_width, numB] with alpha ones in each row (randomly selected)</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">numM</span>, </span><span class=\"param\"><span class=\"n\">numB</span>, </span><span class=\"param\"><span class=\"n\">alpha</span>, </span><span class=\"param\"><span class=\"n\">conv_width</span><span class=\"o\">=</span><span class=\"mi\">21</span>, </span><span class=\"param\"><span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.EImask", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "EImask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">numEIavail</span>,</span><span class=\"param\">\t<span class=\"n\">numE</span>,</span><span class=\"param\">\t<span class=\"n\">numI</span>,</span><span class=\"param\">\t<span class=\"n\">num_filters</span>,</span><span class=\"param\">\t<span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">36</span>,</span><span class=\"param\">\t<span class=\"n\">flatten</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">resample</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.convert2ST", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "convert2ST", "kind": "function", "doc": "<p>Convert temporal-basis-based model to spatiotemporal with new_lags</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">mod0</span>, </span><span class=\"param\"><span class=\"n\">temporal_basis</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_lags</span><span class=\"o\">=</span><span class=\"mi\">16</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.bmodel_regpath", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "bmodel_regpath", "kind": "function", "doc": "<p>regularization-path for NDN model -- standard I think other than using specific details of the model</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>model:</strong>  model to be regularized</li>\n<li><strong>train_ds:</strong>  dataset to be used for training (generic, on device already)</li>\n<li><strong>val_ds:</strong>  dataset for validation, complementary to train_ds</li>\n<li><strong>reg_type:</strong>  type of regularization (required)</li>\n<li><strong>reg_vals:</strong>  list of regularization values (default: [1e-6, 0.0001, 0.001, 0.01, 0.1])</li>\n<li><strong>ffnet_target:</strong>  which ffnetwork that containes layer to regularize (default: 0)</li>\n<li><strong>layer_target:</strong>  which layer to regularize (default 0)</li>\n<li><strong>nullLL:</strong>  give LL-null of model so that can correctly compute LLs relative to null model. Default is\nNone, where it will use the embedded null_adjusted=True of eval_models</li>\n<li><strong>couple_xt:</strong>  whether to make d2t=d2x/2 coupled to 'd2x' when its the reg_type (default: 0.5)</li>\n<li><strong>extended_loop:</strong>  whether to continue with reg_vals of factors of 10 if best value is last (default: True)</li>\n<li><strong>hard_reset:</strong>  when set to 'True': will zero out drift model to force model to fit longer (default: False)</li>\n<li><strong>average_pool:</strong>  if population model, which fraction of LLs to average over to determine \nthe best-reg (default: 1=all)</li>\n<li><strong>verbose:</strong>  self-explanatory (default: True)</li>\n<li><strong>device:</strong>  which device to use (default cuda:0)</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>model_select: selected model\n  reg_val: selected reg value from the reg_vals list\n  export_dict: dictionary with detailed information of reg path</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">train_ds</span>,</span><span class=\"param\">\t<span class=\"n\">val_ds</span>,</span><span class=\"param\">\t<span class=\"n\">reg_type</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reg_vals</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">ffnet_target</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">layer_target</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">nullLL</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">couple_xt</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">hard_reset</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">extended_loop</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">average_pool</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.sico_ffnetworks", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "sico_ffnetworks", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">num_mfilters</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_clones</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numBE</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">numBI</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">mask</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">monoc_width</span><span class=\"o\">=</span><span class=\"mi\">21</span>,</span><span class=\"param\">\t<span class=\"n\">binoc_width</span><span class=\"o\">=</span><span class=\"mi\">13</span>,</span><span class=\"param\">\t<span class=\"n\">num_tkerns</span><span class=\"o\">=</span><span class=\"mi\">8</span>,</span><span class=\"param\">\t<span class=\"n\">NX</span><span class=\"o\">=</span><span class=\"mi\">36</span>,</span><span class=\"param\">\t<span class=\"n\">pos_constraint</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">XregM</span><span class=\"o\">=</span><span class=\"mf\">0.0001</span>,</span><span class=\"param\">\t<span class=\"n\">CregM</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">MregB</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">LOCregR</span><span class=\"o\">=</span><span class=\"mf\">0.1</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.clone_path_prepare_data", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "clone_path_prepare_data", "kind": "function", "doc": "<p>Load dataset and clone model from respective directories for regularization\nSo also translates models into \nUses already-defined datadir and dirname respectively</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>ee:</strong>  expt number starting with zero</li>\n<li><strong>cc:</strong>  cell number starting with zero</li>\n<li><strong>TB:</strong>  temporal bases used to fit clones</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>data_clone: dataset made to fit clone models\n  data1: dataset made to fit single copy of cell\n  clone_path_info: dictionary with the following info (if applicable)\n      LLnull: null model LL computed by fitting drift model\n      drift_terms: drift terms for number of clones specified\n      base_model: base clone model with spatiotemporal filters and nlags, if included\n      LLs: null-adjusted LLs of clone model, if included</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">ee</span>,</span><span class=\"param\">\t<span class=\"n\">cc</span>,</span><span class=\"param\">\t<span class=\"n\">TB</span>,</span><span class=\"param\">\t<span class=\"n\">nlags</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">clone_model</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">num_clones</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">check_performance</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">dirname</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span><span class=\"o\">=</span><span class=\"p\">[]</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.spatiotemporal_box_std", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "spatiotemporal_box_std", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filts</span>,</span><span class=\"param\">\t<span class=\"n\">t_edge</span>,</span><span class=\"param\">\t<span class=\"n\">x_edge</span>,</span><span class=\"param\">\t<span class=\"n\">filt_ns</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">display_cc</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">subplot_info</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.spatiotemporal_std_display", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "spatiotemporal_std_display", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filt2d</span>, </span><span class=\"param\"><span class=\"n\">t_edge</span>, </span><span class=\"param\"><span class=\"n\">x_edge</span>, </span><span class=\"param\"><span class=\"n\">ax_handle</span>, </span><span class=\"param\"><span class=\"n\">display_norm</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.smoothness_select0", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "smoothness_select0", "kind": "function", "doc": "<p>Selects best smoothness based on where transition occurs rather than maximizing LL.\nWill automaticall display unless display_n is set and &lt; 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reg_info</span>, </span><span class=\"param\"><span class=\"n\">LLthresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">tbasis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.smoothness_select", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "smoothness_select", "kind": "function", "doc": "<p>Selects best smoothness based on where transition occurs rather than maximizing LL.\nWill automaticall display unless display_n is set and &lt; 0</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reg_info</span>, </span><span class=\"param\"><span class=\"n\">t_edge</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">x_edge</span><span class=\"o\">=</span><span class=\"mi\">6</span>, </span><span class=\"param\"><span class=\"n\">display_n</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">tbasis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.mask_filter_noise", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "mask_filter_noise", "kind": "function", "doc": "<p>Generates mask over 2-d filter that includes all points greater than 0.1 of the filter max\nReturns the standard dev of the filter outside of the mask, and possibly the mask too</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">area_fraction</span><span class=\"o\">=</span><span class=\"mf\">0.4</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.smoothness_select_contour", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "smoothness_select_contour", "kind": "function", "doc": "<p>Selects best smoothness based on where transition occurs rather than maximizing LL \nthreshold now corresponds to area-fraction as applied by mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reg_info</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">tbasis</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.smoothness_select_contour2", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "smoothness_select_contour2", "kind": "function", "doc": "<p>Selects best smoothness based on where transition occurs rather than maximizing LL \nthreshold now corresponds to area-fraction as applied by mask</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">reg_info</span>, </span><span class=\"param\"><span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>, </span><span class=\"param\"><span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.binocular_filter_shift", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "binocular_filter_shift", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sico0</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.BinocUtils.monocular_filter_shift", "modulename": "NTdatasets.cumming.BinocUtils", "qualname": "monocular_filter_shift", "kind": "function", "doc": "<p>Shifts the filters in the monocular layer, and adjusts the filters in the binocular layer as a result.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sico0</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.binocular", "modulename": "NTdatasets.cumming.binocular", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single", "kind": "class", "doc": "<p>Parent class meant to hold standard variables and functions used by general sensory datasets</p>\n\n<p>General consistent formatting:\n-- self.robs, dfs, and any design matrices are generated as torch vectors on device\n-- stimuli are imported separately as dataset-specific numpy arrays, and but then prepared into \n    self.stim (tensor) by a function self.prepare_stim, which must be overloaded\n-- self.stim_dims gives the dimension of self.stim in 4-dimensional format\n-- all tensors are stored on default device (cpu)</p>\n\n<p>General book-keeping variables\n-- self.block_inds is empty but must be filled in by specific datasets</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.__init__", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.__init__", "kind": "function", "doc": "<p>Args: \n    expt_num: the experiment index\n    time_embed: whether to time-embed the stimulus or not\n    num_lags: the number of lags to use in time-embedding\n    skip_lags: shift stim to throw out early lags\n    filename: currently the pre-processed matlab file from Dan's old-style format\n    **kwargs: non-dataset specific arguments that get passed into SensoryBase</p>\n\n<pre><code>Inherited (but needed from SensoryBase init):\n    datadir, \n    time_embed=2,  # 0 is no time embedding, 1 is time_embedding with get_item, 2 is pre-time_embedded\n    include_MUs = False,\n    drift_interval = None,\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">expt_num</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">12</span>,</span><span class=\"param\">\t<span class=\"n\">skip_lags</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.Bstim", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.Bstim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.dims", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.divide_stim", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.divide_stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.numMUs", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.numMUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.Ui_analog", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.Ui_analog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.XiA_analog", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.XiA_analog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.XiB_analog", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.XiB_analog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.Xi_analog", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.Xi_analog", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.used_inds", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.train_inds", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.val_inds", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.val_indsA", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.val_indsA", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.val_indsB", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.val_indsB", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.dispt", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.dispt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.frs", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.frs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.corrt", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.corrt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.disp_list", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.disp_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.rep_inds", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.rep_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.prepare_stim", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.prepare_stim", "kind": "function", "doc": "<p>Prepare stimulus for dataset.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>time_embed:</strong>  whether to time-embed the stimulus or not</li>\n<li><strong>skip_lags:</strong>  shift stim to throw out early lags</li>\n<li><strong>num_lags:</strong>  the number of lags to use in time-embedding</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">skip_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.binocular.binocular_single.separate_eyes", "modulename": "NTdatasets.cumming.binocular", "qualname": "binocular_single.separate_eyes", "kind": "function", "doc": "<p>Separate the stimulus into left and right eyes.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>val:</strong>  whether to separate the stimulus or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular", "modulename": "NTdatasets.cumming.monocular", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset", "kind": "class", "doc": "<p>MULTIDATASET can load batches from multiple datasets</p>\n\n<p>args specific to this init:\n    filenames\n    datadir\n    num_lags: how many lags back will the presumed model require (for establishing DFs too)\nkwargs handled by SensoryBase:\n    drift_interval: to build drift terms (spacing based on trials)\n    time_embed: whether to time-embed or not\n    trial_sample: whether dataset returns time-contiguous trials for each index or individual time points \n    device</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.__init__", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.__init__", "kind": "function", "doc": "<p>Initialize the MultiDataset class.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames:</strong>  list of strings of the filenames (without extension) to load</li>\n<li><strong>datadir:</strong>  directory where the data is stored</li>\n<li><strong>num_lags:</strong>  how many lags back will the presumed model require (for establishing DFs too)</li>\n<li><strong>time_embed:</strong>  whether to time-embed or not</li>\n<li><strong>trial_sample:</strong>  whether dataset returns time-contiguous trials for each index or individual time points </li>\n<li><strong>device:</strong>  device to put the tensors on</li>\n<li><strong>preload:</strong>  whether to load all data into memory at once</li>\n<li><strong>includeMUs:</strong>  whether to include MUs in the dataset</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">filenames</span>, </span><span class=\"param\"><span class=\"n\">datadir</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">8</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.fhandles", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.file_index", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.block_inds", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.NTfile", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.NTfile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.unit_ids", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.unit_ids", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.dims_file", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.dims_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.num_blocks", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.num_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.block_assign", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.block_assign", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.block_grouping", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.block_grouping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.trial_size", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.trial_size", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.dims", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.stim_dims", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.stim_dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.SUs", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.SUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.avRs", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.to_tensor", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.to_tensor", "kind": "function", "doc": "<p>Convert all data to tensors</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device:</strong>  device to put the tensors on</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.avrates", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: average firing rates across the dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.subset", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.subset", "kind": "function", "doc": "<p>Subsets the dataset to only include the specified indices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>indxs:</strong>  indices to subset the dataset to</li>\n<li><strong>train:</strong>  whether to subset the training set</li>\n<li><strong>val:</strong>  whether to subset the validation set</li>\n<li><strong>device:</strong>  device to put the tensors on</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indxs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.shift_stim_fixation", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  stimulus tensor to shift</li>\n<li><strong>shift:</strong>  amount to shift the stimulus by</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>shstim: shifted stimulus tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.crossval_setup", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  number of folds to use for cross-validation</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>test_set:</strong>  whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.fold_sample", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  number of items to fold</li>\n<li><strong>folds:</strong>  number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: indices for the validation set\n  rem_items: indices for the remaining set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.MultiDataset.collate_blocks", "modulename": "NTdatasets.cumming.monocular", "qualname": "MultiDataset.collate_blocks", "kind": "function", "doc": "<p>Alternative to the collate function that attaches blocks labeled by one index together\nTo explain: if you ask for one index (of a block) from the dataset like [1] and get back \na block of data (B x M), the default collate_fn will still treat this as one data sample \n(1 x B x M) rather than the B data samples in the block. This is a simple flatten...\nNote: assumes that this is getting a dictionary, of course</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.get_stim_url", "modulename": "NTdatasets.cumming.monocular", "qualname": "get_stim_url", "kind": "function", "doc": "<p>Get the stimulus URL for the specified experiment ID.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id:</strong>  experiment ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>URL for the specified experiment ID</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.download_set", "modulename": "NTdatasets.cumming.monocular", "qualname": "download_set", "kind": "function", "doc": "<p>Download the specified data set.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sessname:</strong>  name of the session</li>\n<li><strong>fpath:</strong>  path to save the data set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sessname</span>, </span><span class=\"param\"><span class=\"n\">fpath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.time_in_blocks", "modulename": "NTdatasets.cumming.monocular", "qualname": "time_in_blocks", "kind": "function", "doc": "<p>Calculate the total time in blocks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_inds:</strong>  block indices</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>total time in blocks</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.make_block_inds", "modulename": "NTdatasets.cumming.monocular", "qualname": "make_block_inds", "kind": "function", "doc": "<p>Make block indices from block limits.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_lims:</strong>  block limits</li>\n<li><strong>gap:</strong>  gap between blocks</li>\n<li><strong>separate:</strong>  whether to separate the blocks</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>block indices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_lims</span>, </span><span class=\"param\"><span class=\"n\">gap</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">separate</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular.monocular_data_import", "modulename": "NTdatasets.cumming.monocular", "qualname": "monocular_data_import", "kind": "function", "doc": "<p>Import monocular data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>datadir:</strong>  directory where the data is stored</li>\n<li><strong>exptn:</strong>  experiment name</li>\n<li><strong>num_lags:</strong>  number of lags</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>stim_all: stimulus\n  Robs_all: response\n  DFs_all: data filters\n  Eadd_info: additional information</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datadir</span>, </span><span class=\"param\"><span class=\"n\">exptn</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old", "modulename": "NTdatasets.cumming.monocular_old", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset", "kind": "class", "doc": "<p>MULTIDATASET can load batches from multiple datasets.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.__init__", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sess_list:</strong>  list of sessions</li>\n<li><strong>dirname:</strong>  directory the files are stored in</li>\n<li><strong>preload:</strong>  whether to load all of the data into memory</li>\n<li><strong>num_lags:</strong>  number of lags to use when time-embedding</li>\n<li><strong>time_embed:</strong>  whether to time-embed or not</li>\n<li><strong>includeMUs:</strong>  whether to include the multi-units or not</li>\n<li><strong>device:</strong>  the device to move the data onto</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">sess_list</span>,</span><span class=\"param\">\t<span class=\"n\">dirname</span>,</span><span class=\"param\">\t<span class=\"n\">preload</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">includeMUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.dirname", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.dirname", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.sess_list", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.sess_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.num_lags", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.num_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.fhandles", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.fhandles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.file_index", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.file_index", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.block_inds", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.NTfile", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.NTfile", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.unit_ids", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.unit_ids", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.includeMUs", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.includeMUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.dims_file", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.dims_file", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.preload", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.preload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.device", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.NT", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.NC", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.num_blocks", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.num_blocks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.block_assign", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.block_assign", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.block_grouping", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.block_grouping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.cells_out", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.cells_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.dims", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.sus", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.sus", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.avRs", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.to_tensor", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.to_tensor", "kind": "function", "doc": "<p>Convert all data to torch tensors</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device:</strong>  torch device to move data to</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.avrates", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  indices to calculate across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: average firing rates</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.subset", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.subset", "kind": "function", "doc": "<p>Subsets the dataset based on indices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>indxs:</strong>  indices to subset the data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">indxs</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">train</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.shift_stim_fixation", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.shift_stim_fixation", "kind": "function", "doc": "<p>Simple shift by integer (rounded shift) and zero padded. Note that this is not in \nis in units of number of bars, rather than -1 to +1. It assumes the stim\nhas a batch dimension (over a fixation), and shifts the whole stim by the same amount.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  stimulus tensor</li>\n<li><strong>shift:</strong>  shift amount</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>shstim: shifted stimulus tensor</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span>, </span><span class=\"param\"><span class=\"n\">shift</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.crossval_setup", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<p>Args: \n    folds: number of folds for cross-validation\n    random_gen: whether to pick random fixations for validation or uniformly distributed\n    test_set: whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.MultiDataset.fold_sample", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "MultiDataset.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  number of items to fold</li>\n<li><strong>folds:</strong>  number of folds</li>\n<li><strong>random_gen:</strong>  whether to randomly sample or not</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: validation items\n  rem_items: remaining items</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.get_stim_url", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "get_stim_url", "kind": "function", "doc": "<p>Get the URL for the stimulus file.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>id:</strong>  stimulus ID</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>url: URL for the stimulus file</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"nb\">id</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.download_set", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "download_set", "kind": "function", "doc": "<p>Download the data set.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sessname:</strong>  session name</li>\n<li><strong>fpath:</strong>  file path</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">sessname</span>, </span><span class=\"param\"><span class=\"n\">fpath</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.time_in_blocks", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "time_in_blocks", "kind": "function", "doc": "<p>Calculate the total time in blocks.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_inds:</strong>  block indices</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>NT: total time in blocks</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_inds</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.make_block_inds", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "make_block_inds", "kind": "function", "doc": "<p>Make block indices.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_lims:</strong>  block limits</li>\n<li><strong>gap:</strong>  gap</li>\n<li><strong>separate:</strong>  separate</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>block_inds: block indices</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">block_lims</span>, </span><span class=\"param\"><span class=\"n\">gap</span><span class=\"o\">=</span><span class=\"mi\">20</span>, </span><span class=\"param\"><span class=\"n\">separate</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.cumming.monocular_old.monocular_data_import", "modulename": "NTdatasets.cumming.monocular_old", "qualname": "monocular_data_import", "kind": "function", "doc": "<p>Import monocular data.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>datadir:</strong>  data directory</li>\n<li><strong>exptn:</strong>  experiment number</li>\n<li><strong>num_lags:</strong>  number of lags</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>stim_all: stimulus\n  Robs_all: responses\n  DFs_all: data filters\n  Eadd_info: additional information</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">datadir</span>, </span><span class=\"param\"><span class=\"n\">exptn</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">20</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.generic", "modulename": "NTdatasets.generic", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.generic.GenericDataset", "modulename": "NTdatasets.generic", "qualname": "GenericDataset", "kind": "class", "doc": "<p>Generic Dataset can be used to create a quick pytorch dataset from a dictionary of tensors</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.generic.GenericDataset.__init__", "modulename": "NTdatasets.generic", "qualname": "GenericDataset.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data:</strong>  Dictionary of tensors. Each key will be a covariate for the dataset.</li>\n<li><strong>device:</strong>  Device to put each tensor on. Default is cpu.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">data</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "NTdatasets.generic.GenericDataset.covariates", "modulename": "NTdatasets.generic", "qualname": "GenericDataset.covariates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.generic.GenericDataset.device", "modulename": "NTdatasets.generic", "qualname": "GenericDataset.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.generic.GenericDataset.cov_list", "modulename": "NTdatasets.generic", "qualname": "GenericDataset.cov_list", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta", "modulename": "NTdatasets.pluta", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets", "modulename": "NTdatasets.pluta.whisker_datasets", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData", "kind": "class", "doc": "<p>WhiskerData is a class for handling whisker data from the lab of Scott Pluta.</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.__init__", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.__init__", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>expt_name:</strong>  name of the experiment directory within the datadir</li>\n<li><strong>hemi:</strong>  0=left, 1=right, 2=both</li>\n<li><strong>num_lags:</strong>  number of lags to include in the design matrix</li>\n<li><strong>**kwargs:</strong>  additional arguments to pass to the parent class</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">expt_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">hemi</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span>)</span>"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.NT", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.touchfull", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.touchfull", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.angles", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.angles", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.curves", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.curves", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.phases", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.phases", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.run_speed", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.run_speed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.licks", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.licks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.include_multitouches", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.include_multitouches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.mtouches", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.mtouches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.used_inds", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.NC", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.Rparse", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.Rparse", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.robs", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.robs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.dfs", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.dfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.cells_in", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.cells_in", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.train_inds", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.val_inds", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.touches", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.touches", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.TRhit", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.TRhit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.TRmiss", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.TRmiss", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.TRfpos", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.TRfpos", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.TRcrej", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.TRcrej", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.TRuni", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.TRuni", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.ACinput", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.ACinput", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.prepare_stim", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.prepare_stim", "kind": "function", "doc": "<p>Prepare stimulus for model fitting</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim_config:</strong>  0=AB, 1=BA, 2=ABCD</li>\n<li><strong>num_lags:</strong>  number of lags to include in the design matrix</li>\n<li><strong>temporal_basis:</strong>  doubling time for temporal basis</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">stim_config</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">temporal_basis</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">include_multitouches</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">pre_window</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">post_window</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">pre_post_window</span><span class=\"o\">=</span><span class=\"mi\">2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.set_hemispheres", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.set_hemispheres", "kind": "function", "doc": "<p>This sets cells_out and cells_in based on hemisphere, making things easy. \nCan also set cells_out and cells_in by hand.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>out_config, in_config:</strong>  0=left outputs, 1=right outputs, 2=both</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out_config</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">in_config</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.construct_XLV", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.construct_XLV", "kind": "function", "doc": "<p>Constructs tent-basis-style trial-based tent function</p>\n\n<p>Args: \n    num_tents: default 11\n    cueduncued: whether to fit separate kernels to cued/uncued</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tent_spacing</span><span class=\"o\">=</span><span class=\"mi\">12</span>, </span><span class=\"param\"><span class=\"n\">cueduncued</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.temporal_basis", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.temporal_basis", "kind": "function", "doc": "<p>Make temporal basis for use in temporal basis expansion.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nlags:</strong>  number of lags</li>\n<li><strong>anchors:</strong>  list of anchor points for the temporal basis</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KB: temporal basis</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nlags</span>, </span><span class=\"param\"><span class=\"n\">anchors</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.anchor_set", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.anchor_set", "kind": "function", "doc": "<p>Make anchor set for temporal basis expansion.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>nlags:</strong>  number of lags</li>\n<li><strong>doubling_time:</strong>  doubling time for temporal basis</li>\n<li><strong>offset:</strong>  offset for anchor set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>a: anchor set</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nlags</span>, </span><span class=\"param\"><span class=\"n\">doubling_time</span>, </span><span class=\"param\"><span class=\"n\">offset</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.autoencoder_design_matrix", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.autoencoder_design_matrix", "kind": "function", "doc": "<p>Makes auto-encoder input using windows described above, and including the\nchosen cells. Will put as additional covariate \"ACinput\" in __get_item__</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>pre_win:</strong>  how many time steps to include before origin</li>\n<li><strong>post_win:</strong>  how many time steps to include after origin</li>\n<li><strong>blank:</strong>  how many time steps to blank in each direction, including origin</li>\n<li><strong>cells:</strong>  which cells to include in the auto-encoder design matrix</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">pre_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">post_win</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">blank</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">cells</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.WTAs", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.WTAs", "kind": "function", "doc": "<p>Args: \n    Ton: list of touch onsets for all 4 whiskers\n    Rs: Robs \n    r0, r1: how many lags before and after touch onset to include (and block out)</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>wtas: whisker-triggered averages of firing rate\n  nontouchFRs: average firing rate (spike prob) away from all four whisker touches</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">r0</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">r1</span><span class=\"o\">=</span><span class=\"mi\">30</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.create_NLmap_design_matrix", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.create_NLmap_design_matrix", "kind": "function", "doc": "<p>Make design matrix of certain number of bins that maps variable of interest\nanchorL is so there is not an overall bias fit implicitly.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>x:</strong>  variable of interest</li>\n<li><strong>num_bins:</strong>  number of bins</li>\n<li><strong>val_inds:</strong>  indices to use for thresholding</li>\n<li><strong>thresh:</strong>  threshold for determining borders</li>\n<li><strong>borderL, borderR:</strong>  left and right borders</li>\n<li><strong>anchorL:</strong>  whether to anchor the left side at zero</li>\n<li><strong>rightskip:</strong>  whether to skip the rightmost bin</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>XNL: design matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">x</span>,</span><span class=\"param\">\t<span class=\"n\">num_bins</span>,</span><span class=\"param\">\t<span class=\"n\">val_inds</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">thresh</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">borderL</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">borderR</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">anchorL</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">rightskip</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.find_first_locmin", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.find_first_locmin", "kind": "function", "doc": "<p>Find first local minimum in trace, starting from buf.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>trace:</strong>  trace to analyze</li>\n<li><strong>buf:</strong>  starting point</li>\n<li><strong>sm:</strong>  smoothing window</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>loc: location of first local minimum</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">trace</span>, </span><span class=\"param\"><span class=\"n\">buf</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">sm</span><span class=\"o\">=</span><span class=\"mi\">0</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.prop_distrib", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.prop_distrib", "kind": "function", "doc": "<p>Extracts distribution of a property from events.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>events:</strong>  events</li>\n<li><strong>prop_name:</strong>  property name</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>distrib: distribution of the property</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">events</span>, </span><span class=\"param\"><span class=\"n\">prop_name</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.trial_parse", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.trial_parse", "kind": "function", "doc": "<p>Parse trials from frames.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>frames:</strong>  frames</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>blks: trial blocks</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">frames</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.trial_classify", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.trial_classify", "kind": "function", "doc": "<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>blks:</strong>  trial blocks</li>\n<li><strong>pistons:</strong>  pistons</li>\n<li><strong>outcomes:</strong>  1=hit, 2=miss, 3=false alarm, 4=correct reject</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>TRpistons: trial pistons\n  TRoutcomes: trial outcomes</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">blks</span>, </span><span class=\"param\"><span class=\"n\">pistons</span>, </span><span class=\"param\"><span class=\"n\">outcomes</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.pluta.whisker_datasets.WhiskerData.process_locations", "modulename": "NTdatasets.pluta.whisker_datasets", "qualname": "WhiskerData.process_locations", "kind": "function", "doc": "<p>Process locations.</p>\n\n<p>electrode_info: first column is shank membership, second column is electrode depth</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>clocs:</strong>  cell locations</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>num_cells: number of cells</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">clocs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base", "modulename": "NTdatasets.sensory_base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase", "kind": "class", "doc": "<p>Parent class meant to hold standard variables and functions used by general sensory datasets</p>\n\n<p>General consistent formatting:\n-- self.robs, dfs, and any design matrices are generated as torch vectors on device\n-- stimuli are imported separately as dataset-specific numpy arrays, and but then prepared into \n    self.stim (tensor) by a function self.prepare_stim, which must be overloaded\n-- self.stim_dims gives the dimension of self.stim in 4-dimensional format\n-- all tensors are stored on default device (cpu)</p>\n\n<p>General book-keeping variables\n-- self.block_inds is empty but must be filled in by specific datasets</p>\n", "bases": "typing.Generic[+T_co]"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.__init__", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.__init__", "kind": "function", "doc": "<p>Constructor options</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>filenames:</strong>  the filenames to use</li>\n<li><strong>datadir:</strong>  the data directory</li>\n<li><strong>trial_sample:</strong>  whether to sample trials</li>\n<li><strong>num_lags:</strong>  the number of lags to use</li>\n<li><strong>time_embed:</strong>  the time embedding to use</li>\n<li><strong>include_MUs:</strong>  whether to include MUs</li>\n<li><strong>drift_interval:</strong>  the drift interval to use</li>\n<li><strong>device:</strong>  the device to use</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">filenames</span>,</span><span class=\"param\">\t<span class=\"n\">datadir</span>,</span><span class=\"param\">\t<span class=\"n\">trial_sample</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">num_lags</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">time_embed</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">include_MUs</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">drift_interval</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span><span class=\"p\">)</span></span>)</span>"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.datadir", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.datadir", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.filenames", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.filenames", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.device", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.device", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.trial_sample", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.trial_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.num_lags", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.num_lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.stim_dims", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.stim_dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.time_embed", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.time_embed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.preload", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.preload", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.drift_interval", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.drift_interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.SUs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.SUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.NC", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.NC", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.block_inds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.block_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.block_filemapping", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.block_filemapping", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.include_MUs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.include_MUs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.SUinds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.SUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.MUinds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.MUinds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.cells_out", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.cells_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.robs_out", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.robs_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.dfs_out", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.dfs_out", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.avRs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.avRs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.test_inds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.test_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.val_inds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.val_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.train_inds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.train_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.test_blks", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.test_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.val_blks", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.val_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.train_blks", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.train_blks", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.used_inds", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.used_inds", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.speckled", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.speckled", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.Xdrift", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.Xdrift", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.stim", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.stim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.dfs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.dfs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.robs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.robs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.NT", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.NT", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.covariates", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.covariates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.cov_dims", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.cov_dims", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.add_covariate", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.add_covariate", "kind": "function", "doc": "<p>Adds a covariate to the dataset</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cov_name:</strong>  name of the covariate</li>\n<li><strong>cov:</strong>  the covariate itself</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cov_name</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">cov</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.append_covariates", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.append_covariates", "kind": "function", "doc": "<p>Complements __get_item__ to add covariates to existing dictionary</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>out:</strong>  the dictionary to append to</li>\n<li><strong>idx:</strong>  the index to append at</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">out</span>, </span><span class=\"param\"><span class=\"n\">idx</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.prepare_stim", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.prepare_stim", "kind": "function", "doc": "<p>This function is meant to be overloaded by child classes</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.set_cells", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.set_cells", "kind": "function", "doc": "<p>Set outputs to potentially limit robs/dfs to certain cells \nThis sets cells_out but also constructs efficient data structures</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>cell_list:</strong>  list of cells to output</li>\n<li><strong>verbose:</strong>  whether to print out the number of cells</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">cell_list</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.time_embedding", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.time_embedding", "kind": "function", "doc": "<p>Assume all stim dimensions are flattened into single dimension. \nWill only act on self.stim if 'stim' argument is left None</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  the stimulus to time-embed</li>\n<li><strong>nlags:</strong>  the number of lags to use</li>\n<li><strong>verbose:</strong>  whether to print out the time embedding process</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tmp_stim: the time-embedded stimulus</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">nlags</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">True</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.construct_drift_design_matrix", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.construct_drift_design_matrix", "kind": "function", "doc": "<p>Note this requires self.block_inds, and either uses self.drift_interval or block_anchors</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>block_anchors:</strong>  the block anchors to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">block_anchors</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.trial_psths", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.trial_psths", "kind": "function", "doc": "<p>Computes average firing rate of cells_out at bin-resolution, averaged across trials\ngiven in block_inds</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>trials:</strong>  the trials to compute the PSTHs for</li>\n<li><strong>R:</strong>  the firing rates to use</li>\n<li><strong>trial_size:</strong>  the size of the trials</li>\n<li><strong>verbose:</strong>  whether to print out the trial sizes</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>psths: the PSTHs</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">trials</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">R</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">trial_size</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.construct_LVtents", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.construct_LVtents", "kind": "function", "doc": "<p>Constructs tent-basis-style trial-based tent function</p>\n\n<p>Args: \n    tent_spacing: the spacing of the tent functions</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>XLV: the design matrix\n  LVdims: the dimensions of the design matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tent_spacing</span><span class=\"o\">=</span><span class=\"mi\">12</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.setup_trial_LVs", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.setup_trial_LVs", "kind": "function", "doc": "<p>Usage: XLV = dataset.setup_trial_LVs()</p>\n\n<p>This makes design matrix as input for LVlayer (indexed LV for each trial) and outputs X, LVdims \nto actually figure out which LVs correspond to which trial, once it is done</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>X: the design matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.setup_LVLayer_input", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.setup_LVLayer_input", "kind": "function", "doc": "<p>Usage: X, filter_dims = data.setup_LVLayer_input( tent_spacing=10, trsize=None)</p>\n\n<p>Sets up tent-basis-input to LVLayer (part of NDNT code)\nThis preserves all data by using multiple effective trials for long trials. </p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>tent_spacing:</strong>  the spacing of the tent functions</li>\n<li><strong>trsize:</strong>  the size of the trials</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">tent_spacing</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">trsize</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.design_matrix_drift", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.design_matrix_drift", "kind": "function", "doc": "<p>Produce a design matrix based on continuous data (s) and anchor points for a tent_basis.\nHere s is a continuous variable (e.g., a stimulus) that is function of time -- single dimension --\nand this will generate apply a tent basis set to s with a basis variable for each anchor point. \nThe end anchor points will be one-sided, but these can be dropped by changing \"zero_left\" and/or\n\"zero_right\" into \"True\".</p>\n\n<p>Args: \n    NT: length of design matrix\n    anchors: list or array of anchor points for tent-basis set\n    zero_left, zero_right: boolean whether to drop the edge bases (default for both is False)\n    const_left, const_right: boolean whether to make constant basis on left/right (default for both is False)\n    to_plot: whether to plot the design matrix</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>X: design matrix that will be NT x the number of anchors left after zeroing out left and right</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">NT</span>,</span><span class=\"param\">\t<span class=\"n\">anchors</span>,</span><span class=\"param\">\t<span class=\"n\">zero_left</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">zero_right</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">const_left</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">const_right</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">to_plot</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.construct_onehot_design_matrix", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.construct_onehot_design_matrix", "kind": "function", "doc": "<p>Construct one-hot design matrix from stimulus.</p>\n\n<p>The stimulus should be numpy -- not meant to be used with torch currently.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>stim:</strong>  the stimulus to construct one-hot design matrix from</li>\n<li><strong>return_categories:</strong>  whether to return the categories</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>OHmatrix: the one-hot design matrix</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">stim</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">return_categories</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.avrates", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.avrates", "kind": "function", "doc": "<p>Calculates average firing probability across specified inds (or whole dataset)\n-- Note will respect datafilters\n-- will return precalc value to save time if already stored</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>inds:</strong>  the indices to calculate the average firing probability across</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>avRs: the average firing probability</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">inds</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.crossval_setup", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.crossval_setup", "kind": "function", "doc": "<p>This sets the cross-validation indices up We can add featuers here. Many ways to do this\nbut will stick to some standard for now. It sets the internal indices, which can be read out\ndirectly or with helper functions. Perhaps helper_functions is the best way....</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  the number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>test_set:</strong>  whether to set aside first an n-fold test set, and then within the rest n-fold train/val sets</li>\n<li><strong>verbose:</strong>  whether to print out the number of fixations in each set</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None: sets internal variables test_inds, train_inds, val_inds</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">test_set</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.fold_sample", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.fold_sample", "kind": "function", "doc": "<p>This really should be a general method not associated with self</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>num_items:</strong>  the number of items to sample</li>\n<li><strong>folds:</strong>  the number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n<li><strong>which_fold:</strong>  which fold to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>val_items: the validation items\n  rem_items: the remaining items</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">num_items</span>, </span><span class=\"param\"><span class=\"n\">folds</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"n\">which_fold</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.speckledXV_setup", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.speckledXV_setup", "kind": "function", "doc": "<p>Produce data-filter masks for training and XV speckles\nWill be produced for whole dataset, and must be reduced if cells_out used</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>folds:</strong>  the number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.set_speckledXV", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.set_speckledXV", "kind": "function", "doc": "<p>Set up speckled cross-validation with data-filter masks</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>val:</strong>  whether to set up speckled cross-validation</li>\n<li><strong>folds:</strong>  the number of folds to use</li>\n<li><strong>random_gen:</strong>  whether to pick random fixations for validation or uniformly distributed</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">val</span><span class=\"o\">=</span><span class=\"kc\">True</span>, </span><span class=\"param\"><span class=\"n\">folds</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">random_gen</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.make_data_dicts", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.make_data_dicts", "kind": "function", "doc": "<p>Usage: train_ds, val_ds = dataset.make_data_dicts( device=None, all=False )</p>\n\n<p>Produce generic datasets on device of choice\ndevice defaults to cuda-0\nIf <all> is True, then will make single dataset without XVal</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>device:</strong>  the device to put the datasets on</li>\n<li><strong>all:</strong>  whether to use all data</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>train_ds: the training dataset\n  val_ds: the validation dataset</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">device</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"nb\">all</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.get_max_samples", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.get_max_samples", "kind": "function", "doc": "<p>get the maximum number of samples that fit in memory -- for GLM/GQM x LBFGS</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>gpu_n:</strong>  the gpu number to use</li>\n<li><strong>history_size:</strong>  the history size</li>\n<li><strong>nquad:</strong>  the number of quadrature points</li>\n<li><strong>num_cells:</strong>  the number of cells to use</li>\n<li><strong>buffer:</strong>  the buffer to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>maxsamples: the maximum number of samples that fit in memory</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">gpu_n</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">history_size</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">nquad</span><span class=\"o\">=</span><span class=\"mi\">0</span>, </span><span class=\"param\"><span class=\"n\">num_cells</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">buffer</span><span class=\"o\">=</span><span class=\"mf\">1.2</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.assemble_stimulus", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.assemble_stimulus", "kind": "function", "doc": "<p>This function is meant to be overloaded by child classes</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>None</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.is_int", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.is_int", "kind": "function", "doc": "<p>Returns a boolean as to whether val is one of many types of integers</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>True if val is an integer, False otherwise</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "NTdatasets.sensory_base.SensoryBase.index_to_array", "modulename": "NTdatasets.sensory_base", "qualname": "SensoryBase.index_to_array", "kind": "function", "doc": "<p>This converts any for index to dataset, including slices, and plain ints, into numpy array</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>index:</strong>  the index to convert</li>\n<li><strong>max_val:</strong>  the maximum value to use</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>index: the converted index</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">index</span>, </span><span class=\"param\"><span class=\"n\">max_val</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();